
gimbal_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000015ba  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800100  00800100  000015ba  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000015e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002219  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d43  00000000  00000000  000038fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d4  00000000  00000000  0000463d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000274  00000000  00000000  00005014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e1  00000000  00000000  00005288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a5e  00000000  00000000  00005669  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000060c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00001542  00001542  000015b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006198  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ERROR_CHECK 00000008  00001514  00001514  00001588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.mpu_init 00000036  000012fc  000012fc  00001370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.mpu_get_int_accel 00000086  00000d18  00000d18  00000d8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.mpu_get_gyro_accel 00000086  00000d9e  00000d9e  00000e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.mpu_set_accel_sensivity 0000002e  0000139a  0000139a  0000140e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.mpu_set_gyro_sensivity 0000002e  000013c8  000013c8  0000143c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    0000070a  000001be  000001be  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_14 0000002e  000013f6  000013f6  0000146a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.pitch    00000004  00800150  00800150  000015ba  2**0
                  ALLOC
 23 .bss.roll     00000004  00800154  00800154  000015ba  2**0
                  ALLOC
 24 .bss.yaw      00000004  00800158  00800158  000015ba  2**0
                  ALLOC
 25 .text.servo328PB_init 00000050  00001196  00001196  0000120a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.servo_update 0000001a  0000148a  0000148a  000014fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.tw_start 00000032  00001368  00001368  000013dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.tw_stop 00000008  0000151c  0000151c  00001590  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.tw_write_sla 00000036  00001332  00001332  000013a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.tw_write 00000028  00001424  00001424  00001498  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.tw_read 00000042  00001278  00001278  000012ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.tw_init 00000042  000012ba  000012ba  0000132e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.tw_master_transmit 0000006a  00001008  00001008  0000107c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.tw_master_receive 0000007e  00000e24  00000e24  00000e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc.fplib 0000000e  000014b4  000014b4  00001528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc.fplib 000000ce  00000a7a  00000a7a  00000aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc.fplib 0000005e  000010da  000010da  0000114e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc.fplib 00000008  00001524  00001524  00001598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc.fplib 000000de  000008c8  000008c8  0000093c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc.fplib 0000000e  000014c2  000014c2  00001536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc.fplib 0000005e  00001138  00001138  000011ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc.fplib 0000007a  00000ea2  00000ea2  00000f16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.avrlibc.fplib 0000000c  00001508  00001508  0000157c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.avrlibc.fplib 00000006  0000153c  0000153c  000015b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc.fplib 0000004e  000011e6  000011e6  0000125a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.avrlibc.fplib 0000000e  000014d0  000014d0  00001544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.avrlibc.fplib 0000000e  000014de  000014de  00001552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.avrlibc.fplib 00000022  0000144c  0000144c  000014c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.avrlibc.fplib 00000044  00001234  00001234  000012a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.avrlibc.fplib 0000000e  000014ec  000014ec  00001560  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.avrlibc.fplib 00000010  000014a4  000014a4  00001518  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.avrlibc.fplib 00000008  0000152c  0000152c  000015a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.avrlibc.fplib 000000d4  000009a6  000009a6  00000a1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.avrlibc.fplib 000000a0  00000bea  00000bea  00000c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.avrlibc.fplib 0000008e  00000c8a  00000c8a  00000cfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.avrlibc.fplib 00000008  00001534  00001534  000015a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.avrlibc.fplib 00000076  00000f1c  00000f1c  00000f90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.avrlibc.fplib 0000001c  0000146e  0000146e  000014e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.avrlibc.fplib 0000000e  000014fa  000014fa  0000156e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.avrlibc.fplib 00000076  00000f92  00000f92  00001006  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.avrlibc.fplib 000000a2  00000b48  00000b48  00000bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.avrlibc.fplib 00000068  00001072  00001072  000010e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
   4:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
   8:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
   c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  10:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  14:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  18:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  1c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  20:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  24:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  28:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  2c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  30:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  34:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  38:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_14>
  3c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  40:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  44:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  48:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  4c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  50:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  54:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  58:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  5c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  60:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  64:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  68:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  6c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  70:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  74:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  78:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  7c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  80:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  84:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  88:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  8c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  90:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  94:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  98:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  9c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  a0:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  a4:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  a8:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  ac:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  b0:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__bad_interrupt>
  b4:	08 4a       	sbci	r16, 0xA8	; 168
  b6:	d7 3b       	cpi	r29, 0xB7	; 183
  b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
  ba:	01 6e       	ori	r16, 0xE1	; 225
  bc:	84 bc       	out	0x24, r8	; 36
  be:	bf fd       	.word	0xfdbf	; ????
  c0:	c1 2f       	mov	r28, r17
  c2:	3d 6c       	ori	r19, 0xCD	; 205
  c4:	74 31       	cpi	r23, 0x14	; 20
  c6:	9a bd       	out	0x2a, r25	; 42
  c8:	56 83       	std	Z+6, r21	; 0x06
  ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
  cc:	3d 00       	.word	0x003d	; ????
  ce:	c7 7f       	andi	r28, 0xF7	; 247
  d0:	11 be       	out	0x31, r1	; 49
  d2:	d9 e4       	ldi	r29, 0x49	; 73
  d4:	bb 4c       	sbci	r27, 0xCB	; 203
  d6:	3e 91       	ld	r19, -X
  d8:	6b aa       	std	Y+51, r6	; 0x33
  da:	aa be       	out	0x3a, r10	; 58
  dc:	00 00       	nop
  de:	00 80       	ld	r0, Z
  e0:	3f 07       	cpc	r19, r31
  e2:	63 42       	sbci	r22, 0x23	; 35
  e4:	36 b7       	in	r19, 0x36	; 54
  e6:	9b d8       	rcall	.-3786   	; 0xfffff21e <__eeprom_end+0xff7ef21e>
  e8:	a7 1a       	sub	r10, r23
  ea:	39 68       	ori	r19, 0x89	; 137
  ec:	56 18       	sub	r5, r6
  ee:	ae ba       	out	0x1e, r10	; 30
  f0:	ab 55       	subi	r26, 0x5B	; 91
  f2:	8c 1d       	adc	r24, r12
  f4:	3c b7       	in	r19, 0x3c	; 60
  f6:	cc 57       	subi	r28, 0x7C	; 124
  f8:	63 bd       	out	0x23, r22	; 35
  fa:	6d ed       	ldi	r22, 0xDD	; 221
  fc:	fd 75       	andi	r31, 0x5D	; 93
  fe:	3e f6       	brtc	.-114    	; 0x8e <__SREG__+0x4f>
 100:	17 72       	andi	r17, 0x27	; 39
 102:	31 bf       	out	0x31, r19	; 49
 104:	00 00       	nop
 106:	00 80       	ld	r0, Z
 108:	3f 08       	sbc	r3, r15
 10a:	00 00       	nop
 10c:	00 be       	out	0x30, r0	; 48
 10e:	92 24       	eor	r9, r2
 110:	49 12       	cpse	r4, r25
 112:	3e ab       	std	Y+54, r19	; 0x36
 114:	aa aa       	std	Y+50, r10	; 0x32
 116:	2a be       	out	0x3a, r2	; 58
 118:	cd cc       	rjmp	.-1638   	; 0xfffffab4 <__eeprom_end+0xff7efab4>
 11a:	cc 4c       	sbci	r28, 0xCC	; 204
 11c:	3e 00       	.word	0x003e	; ????
 11e:	00 00       	nop
 120:	80 be       	out	0x30, r8	; 48
 122:	ab aa       	std	Y+51, r10	; 0x33
 124:	aa aa       	std	Y+50, r10	; 0x32
 126:	3e 00       	.word	0x003e	; ????
 128:	00 00       	nop
 12a:	00 bf       	out	0x30, r16	; 48
 12c:	00 00       	nop
 12e:	00 80       	ld	r0, Z
 130:	3f 00       	.word	0x003f	; ????
 132:	00 00       	nop
 134:	00 00       	nop
 136:	08 41       	sbci	r16, 0x18	; 24
 138:	78 d3       	rcall	.+1776   	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 13a:	bb 43       	sbci	r27, 0x3B	; 59
 13c:	87 d1       	rcall	.+782    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 13e:	13 3d       	cpi	r17, 0xD3	; 211
 140:	19 0e       	add	r1, r25
 142:	3c c3       	rjmp	.+1656   	; 0x7bc <__EEPROM_REGION_LENGTH__+0x3bc>
 144:	bd 42       	sbci	r27, 0x2D	; 45
 146:	82 ad       	ldd	r24, Z+58	; 0x3a
 148:	2b 3e       	cpi	r18, 0xEB	; 235
 14a:	68 ec       	ldi	r22, 0xC8	; 200
 14c:	82 76       	andi	r24, 0x62	; 98
 14e:	be d9       	rcall	.-3204   	; 0xfffff4cc <__eeprom_end+0xff7ef4cc>
 150:	8f e1       	ldi	r24, 0x1F	; 31
 152:	a9 3e       	cpi	r26, 0xE9	; 233
 154:	4c 80       	ldd	r4, Y+4	; 0x04
 156:	ef ff       	.word	0xffef	; ????
 158:	be 01       	movw	r22, r28
 15a:	c4 ff       	sbrs	r28, 4
 15c:	7f 3f       	cpi	r23, 0xFF	; 255
 15e:	00 00       	nop
 160:	00 00       	nop
	...

00000164 <.dinit>:
 164:	01 00       	.word	0x0001	; ????
 166:	01 5c       	subi	r16, 0xC1	; 193
 168:	80 00       	.word	0x0080	; ????

0000016a <__ctors_end>:
 16a:	11 24       	eor	r1, r1
 16c:	1f be       	out	0x3f, r1	; 63
 16e:	cf ef       	ldi	r28, 0xFF	; 255
 170:	d8 e0       	ldi	r29, 0x08	; 8
 172:	de bf       	out	0x3e, r29	; 62
 174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
 176:	e4 e6       	ldi	r30, 0x64	; 100
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	17 c0       	rjmp	.+46     	; 0x1ac <__do_clear_bss+0x8>
 17e:	b5 91       	lpm	r27, Z+
 180:	a5 91       	lpm	r26, Z+
 182:	35 91       	lpm	r19, Z+
 184:	25 91       	lpm	r18, Z+
 186:	05 91       	lpm	r16, Z+
 188:	07 fd       	sbrc	r16, 7
 18a:	0c c0       	rjmp	.+24     	; 0x1a4 <__do_clear_bss>
 18c:	95 91       	lpm	r25, Z+
 18e:	85 91       	lpm	r24, Z+
 190:	ef 01       	movw	r28, r30
 192:	f9 2f       	mov	r31, r25
 194:	e8 2f       	mov	r30, r24
 196:	05 90       	lpm	r0, Z+
 198:	0d 92       	st	X+, r0
 19a:	a2 17       	cp	r26, r18
 19c:	b3 07       	cpc	r27, r19
 19e:	d9 f7       	brne	.-10     	; 0x196 <__do_copy_data+0x20>
 1a0:	fe 01       	movw	r30, r28
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <__do_clear_bss+0x8>

000001a4 <__do_clear_bss>:
 1a4:	1d 92       	st	X+, r1
 1a6:	a2 17       	cp	r26, r18
 1a8:	b3 07       	cpc	r27, r19
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <__do_clear_bss>
 1ac:	e9 36       	cpi	r30, 0x69	; 105
 1ae:	f4 07       	cpc	r31, r20
 1b0:	31 f7       	brne	.-52     	; 0x17e <__do_copy_data+0x8>
 1b2:	0e 94 df 00 	call	0x1be	; 0x1be <_etext>
 1b6:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>

Disassembly of section .text:

00001542 <__bad_interrupt>:
    1542:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ERROR_CHECK:

00001514 <ERROR_CHECK>:

extern ret_code_t error_code;

void ERROR_CHECK(ret_code_t error_code)
{
	if (error_code != SUCCESS)
    1514:	89 2b       	or	r24, r25
    1516:	09 f0       	breq	.+2      	; 0x151a <ERROR_CHECK+0x6>
    1518:	ff cf       	rjmp	.-2      	; 0x1518 <ERROR_CHECK+0x4>
    151a:	08 95       	ret

Disassembly of section .text.mpu_init:

000012fc <mpu_init>:
	}
}


void mpu_init(void)
{
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	00 d0       	rcall	.+0      	; 0x1302 <mpu_init+0x6>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[2] = {PWR_MGMT_1, 0};
    1306:	8b e6       	ldi	r24, 0x6B	; 107
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	1a 82       	std	Y+2, r1	; 0x02
	error_code = tw_master_transmit(MPU6050_ADDR, data, sizeof(data), false);
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	42 e0       	ldi	r20, 0x02	; 2
    1310:	be 01       	movw	r22, r28
    1312:	6f 5f       	subi	r22, 0xFF	; 255
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	88 e6       	ldi	r24, 0x68	; 104
    1318:	0e 94 04 08 	call	0x1008	; 0x1008 <tw_master_transmit>
    131c:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <error_code+0x1>
    1320:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <error_code>
	ERROR_CHECK(error_code);
    1324:	0e 94 8a 0a 	call	0x1514	; 0x1514 <ERROR_CHECK>
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

Disassembly of section .text.mpu_get_int_accel:

00000d18 <mpu_get_int_accel>:

void mpu_get_int_accel(mpu_int_data_t* mpu_data){
 d18:	0f 93       	push	r16
 d1a:	1f 93       	push	r17
 d1c:	cf 93       	push	r28
 d1e:	df 93       	push	r29
 d20:	00 d0       	rcall	.+0      	; 0xd22 <mpu_get_int_accel+0xa>
 d22:	00 d0       	rcall	.+0      	; 0xd24 <mpu_get_int_accel+0xc>
 d24:	00 d0       	rcall	.+0      	; 0xd26 <mpu_get_int_accel+0xe>
 d26:	cd b7       	in	r28, 0x3d	; 61
 d28:	de b7       	in	r29, 0x3e	; 62
 d2a:	8c 01       	movw	r16, r24
		ret_code_t error_code;
		/* 2 registers for each of accel x, y and z data */
		uint8_t data[6];
		
		data[0] = ACCEL_XOUT_H;
 d2c:	8b e3       	ldi	r24, 0x3B	; 59
 d2e:	89 83       	std	Y+1, r24	; 0x01
		error_code = tw_master_transmit(MPU6050_ADDR, data, 1, true);
 d30:	21 e0       	ldi	r18, 0x01	; 1
 d32:	41 e0       	ldi	r20, 0x01	; 1
 d34:	be 01       	movw	r22, r28
 d36:	6f 5f       	subi	r22, 0xFF	; 255
 d38:	7f 4f       	sbci	r23, 0xFF	; 255
 d3a:	88 e6       	ldi	r24, 0x68	; 104
 d3c:	0e 94 04 08 	call	0x1008	; 0x1008 <tw_master_transmit>
		ERROR_CHECK(error_code);
 d40:	0e 94 8a 0a 	call	0x1514	; 0x1514 <ERROR_CHECK>
		
		error_code = tw_master_receive(MPU6050_ADDR, data, sizeof(data));
 d44:	46 e0       	ldi	r20, 0x06	; 6
 d46:	be 01       	movw	r22, r28
 d48:	6f 5f       	subi	r22, 0xFF	; 255
 d4a:	7f 4f       	sbci	r23, 0xFF	; 255
 d4c:	88 e6       	ldi	r24, 0x68	; 104
 d4e:	0e 94 12 07 	call	0xe24	; 0xe24 <tw_master_receive>
		ERROR_CHECK(error_code);
 d52:	0e 94 8a 0a 	call	0x1514	; 0x1514 <ERROR_CHECK>
		
		/* Default accel config +/- 2g */
		mpu_data->x = (int16_t)(data[0] << 8 | data[1]);
 d56:	89 81       	ldd	r24, Y+1	; 0x01
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	98 2f       	mov	r25, r24
 d5c:	88 27       	eor	r24, r24
 d5e:	2a 81       	ldd	r18, Y+2	; 0x02
 d60:	82 2b       	or	r24, r18
 d62:	f8 01       	movw	r30, r16
 d64:	91 83       	std	Z+1, r25	; 0x01
 d66:	80 83       	st	Z, r24
		mpu_data->y = (int16_t)(data[2] << 8 | data[3]);
 d68:	8b 81       	ldd	r24, Y+3	; 0x03
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	98 2f       	mov	r25, r24
 d6e:	88 27       	eor	r24, r24
 d70:	2c 81       	ldd	r18, Y+4	; 0x04
 d72:	82 2b       	or	r24, r18
 d74:	93 83       	std	Z+3, r25	; 0x03
 d76:	82 83       	std	Z+2, r24	; 0x02
		mpu_data->z = (int16_t)(data[4] << 8 | data[5]);
 d78:	8d 81       	ldd	r24, Y+5	; 0x05
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	98 2f       	mov	r25, r24
 d7e:	88 27       	eor	r24, r24
 d80:	2e 81       	ldd	r18, Y+6	; 0x06
 d82:	82 2b       	or	r24, r18
 d84:	95 83       	std	Z+5, r25	; 0x05
 d86:	84 83       	std	Z+4, r24	; 0x04

}
 d88:	26 96       	adiw	r28, 0x06	; 6
 d8a:	0f b6       	in	r0, 0x3f	; 63
 d8c:	f8 94       	cli
 d8e:	de bf       	out	0x3e, r29	; 62
 d90:	0f be       	out	0x3f, r0	; 63
 d92:	cd bf       	out	0x3d, r28	; 61
 d94:	df 91       	pop	r29
 d96:	cf 91       	pop	r28
 d98:	1f 91       	pop	r17
 d9a:	0f 91       	pop	r16
 d9c:	08 95       	ret

Disassembly of section .text.mpu_get_gyro_accel:

00000d9e <mpu_get_gyro_accel>:

void mpu_get_gyro_accel(mpu_gyro_data_t* mpu_data){
 d9e:	0f 93       	push	r16
 da0:	1f 93       	push	r17
 da2:	cf 93       	push	r28
 da4:	df 93       	push	r29
 da6:	00 d0       	rcall	.+0      	; 0xda8 <mpu_get_gyro_accel+0xa>
 da8:	00 d0       	rcall	.+0      	; 0xdaa <mpu_get_gyro_accel+0xc>
 daa:	00 d0       	rcall	.+0      	; 0xdac <mpu_get_gyro_accel+0xe>
 dac:	cd b7       	in	r28, 0x3d	; 61
 dae:	de b7       	in	r29, 0x3e	; 62
 db0:	8c 01       	movw	r16, r24
		ret_code_t error_code;
		/* 2 registers for each of gyro x, y and z data */
		uint8_t data[6];
		
		data[0] = GYRO_XOUT_H;
 db2:	83 e4       	ldi	r24, 0x43	; 67
 db4:	89 83       	std	Y+1, r24	; 0x01
		error_code = tw_master_transmit(MPU6050_ADDR, data, 1, true);
 db6:	21 e0       	ldi	r18, 0x01	; 1
 db8:	41 e0       	ldi	r20, 0x01	; 1
 dba:	be 01       	movw	r22, r28
 dbc:	6f 5f       	subi	r22, 0xFF	; 255
 dbe:	7f 4f       	sbci	r23, 0xFF	; 255
 dc0:	88 e6       	ldi	r24, 0x68	; 104
 dc2:	0e 94 04 08 	call	0x1008	; 0x1008 <tw_master_transmit>
		ERROR_CHECK(error_code);
 dc6:	0e 94 8a 0a 	call	0x1514	; 0x1514 <ERROR_CHECK>
		
		error_code = tw_master_receive(MPU6050_ADDR, data, sizeof(data));
 dca:	46 e0       	ldi	r20, 0x06	; 6
 dcc:	be 01       	movw	r22, r28
 dce:	6f 5f       	subi	r22, 0xFF	; 255
 dd0:	7f 4f       	sbci	r23, 0xFF	; 255
 dd2:	88 e6       	ldi	r24, 0x68	; 104
 dd4:	0e 94 12 07 	call	0xe24	; 0xe24 <tw_master_receive>
		ERROR_CHECK(error_code);
 dd8:	0e 94 8a 0a 	call	0x1514	; 0x1514 <ERROR_CHECK>
		
		/* Default gyro config */
		mpu_data->x = (int16_t)(data[0] << 8 | data[1]);
 ddc:	89 81       	ldd	r24, Y+1	; 0x01
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	98 2f       	mov	r25, r24
 de2:	88 27       	eor	r24, r24
 de4:	2a 81       	ldd	r18, Y+2	; 0x02
 de6:	82 2b       	or	r24, r18
 de8:	f8 01       	movw	r30, r16
 dea:	91 83       	std	Z+1, r25	; 0x01
 dec:	80 83       	st	Z, r24
		mpu_data->y = (int16_t)(data[2] << 8 | data[3]);
 dee:	8b 81       	ldd	r24, Y+3	; 0x03
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	98 2f       	mov	r25, r24
 df4:	88 27       	eor	r24, r24
 df6:	2c 81       	ldd	r18, Y+4	; 0x04
 df8:	82 2b       	or	r24, r18
 dfa:	93 83       	std	Z+3, r25	; 0x03
 dfc:	82 83       	std	Z+2, r24	; 0x02
		mpu_data->z = (int16_t)(data[4] << 8 | data[5]);
 dfe:	8d 81       	ldd	r24, Y+5	; 0x05
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	98 2f       	mov	r25, r24
 e04:	88 27       	eor	r24, r24
 e06:	2e 81       	ldd	r18, Y+6	; 0x06
 e08:	82 2b       	or	r24, r18
 e0a:	95 83       	std	Z+5, r25	; 0x05
 e0c:	84 83       	std	Z+4, r24	; 0x04

}
 e0e:	26 96       	adiw	r28, 0x06	; 6
 e10:	0f b6       	in	r0, 0x3f	; 63
 e12:	f8 94       	cli
 e14:	de bf       	out	0x3e, r29	; 62
 e16:	0f be       	out	0x3f, r0	; 63
 e18:	cd bf       	out	0x3d, r28	; 61
 e1a:	df 91       	pop	r29
 e1c:	cf 91       	pop	r28
 e1e:	1f 91       	pop	r17
 e20:	0f 91       	pop	r16
 e22:	08 95       	ret

Disassembly of section .text.mpu_set_accel_sensivity:

0000139a <mpu_set_accel_sensivity>:

void mpu_set_accel_sensivity(uint8_t sensivity){
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <mpu_set_accel_sensivity+0x6>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	ret_code_t error_code;
	
	uint8_t wsk[2] = {ACCEL_CONFIG,sensivity}; 
    13a4:	9c e1       	ldi	r25, 0x1C	; 28
    13a6:	99 83       	std	Y+1, r25	; 0x01
    13a8:	8a 83       	std	Y+2, r24	; 0x02
	error_code =  tw_master_transmit(MPU6050_ADDR, wsk, 2, true);
    13aa:	21 e0       	ldi	r18, 0x01	; 1
    13ac:	42 e0       	ldi	r20, 0x02	; 2
    13ae:	be 01       	movw	r22, r28
    13b0:	6f 5f       	subi	r22, 0xFF	; 255
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	88 e6       	ldi	r24, 0x68	; 104
    13b6:	0e 94 04 08 	call	0x1008	; 0x1008 <tw_master_transmit>
	ERROR_CHECK(error_code);
    13ba:	0e 94 8a 0a 	call	0x1514	; 0x1514 <ERROR_CHECK>

}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

Disassembly of section .text.mpu_set_gyro_sensivity:

000013c8 <mpu_set_gyro_sensivity>:
void mpu_set_gyro_sensivity(){
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <mpu_set_gyro_sensivity+0x6>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	ret_code_t error_code;
	
	uint8_t wsk[2] = {GYRO_CONFIG,0x00}; 
    13d2:	8b e1       	ldi	r24, 0x1B	; 27
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	1a 82       	std	Y+2, r1	; 0x02
	error_code =  tw_master_transmit(MPU6050_ADDR,wsk , 2, true);
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	42 e0       	ldi	r20, 0x02	; 2
    13dc:	be 01       	movw	r22, r28
    13de:	6f 5f       	subi	r22, 0xFF	; 255
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255
    13e2:	88 e6       	ldi	r24, 0x68	; 104
    13e4:	0e 94 04 08 	call	0x1008	; 0x1008 <tw_master_transmit>
	ERROR_CHECK(error_code);
    13e8:	0e 94 8a 0a 	call	0x1514	; 0x1514 <ERROR_CHECK>
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

Disassembly of section .text.main:

000001be <main>:
	float elepsedTime;
//------------- END global inicjalizations -------------------


int main(void)
{	 
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	2a 97       	sbiw	r28, 0x0a	; 10
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	cd bf       	out	0x3d, r28	; 61
	// --------- timer 0 init
	TCCR0A  = 0x00; //normal mode
 1d2:	14 bc       	out	0x24, r1	; 36
	OCR0A = 25;
 1d4:	89 e1       	ldi	r24, 0x19	; 25
 1d6:	87 bd       	out	0x27, r24	; 39
	TCNT0   = 0x00;
 1d8:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= 0x02;
 1da:	ee e6       	ldi	r30, 0x6E	; 110
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	80 83       	st	Z, r24
	TCCR0B = (1<<CS01) | (1<<CS00); // preskaler 64 and start clock
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	85 bd       	out	0x25, r24	; 37
    //TIMSK0 |= 0x02;
    //TCCR0B = (1<<CS01); //| (1<<CS00); // preskaler 8 and start clock
	/* Initialize project configuration */
	
	
	tw_init(TW_FREQ_400K, true); // set I2C Frequency, enable internal pull-up
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 5d 09 	call	0x12ba	; 0x12ba <tw_init>
	mpu_init();
 1f0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <mpu_init>
	mpu_set_accel_sensivity(EIGTH_G_SCALE);
 1f4:	80 e1       	ldi	r24, 0x10	; 16
 1f6:	0e 94 cd 09 	call	0x139a	; 0x139a <mpu_set_accel_sensivity>
	servo328PB_init();
 1fa:	0e 94 cb 08 	call	0x1196	; 0x1196 <servo328PB_init>
	mpu_set_gyro_sensivity();
 1fe:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <mpu_set_gyro_sensivity>
	// ---------- init variable --------------
	
		    servo0.index = 0;
 202:	e8 e3       	ldi	r30, 0x38	; 56
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	11 82       	std	Z+1, r1	; 0x01
 208:	10 82       	st	Z, r1
		    servo0.value = START_VALUE_1;
 20a:	81 ec       	ldi	r24, 0xC1	; 193
 20c:	9b e0       	ldi	r25, 0x0B	; 11
 20e:	93 83       	std	Z+3, r25	; 0x03
 210:	82 83       	std	Z+2, r24	; 0x02
		    servo1.index = 1;
 212:	ee e2       	ldi	r30, 0x2E	; 46
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	91 83       	std	Z+1, r25	; 0x01
 21c:	80 83       	st	Z, r24
		    servo1.value = START_VALUE_2;
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	9c e0       	ldi	r25, 0x0C	; 12
 222:	93 83       	std	Z+3, r25	; 0x03
 224:	82 83       	std	Z+2, r24	; 0x02
		    servo2.index = 2;
 226:	e8 e4       	ldi	r30, 0x48	; 72
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	91 83       	std	Z+1, r25	; 0x01
 230:	80 83       	st	Z, r24
		    servo2.value = START_VALUE_3;
 232:	82 e7       	ldi	r24, 0x72	; 114
 234:	9b e0       	ldi	r25, 0x0B	; 11
 236:	93 83       	std	Z+3, r25	; 0x03
 238:	82 83       	std	Z+2, r24	; 0x02

		milis = 0;
 23a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <milis+0x1>
 23e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <milis>
		TCNT0   = 0x00;
 242:	16 bc       	out	0x26, r1	; 38
		sei();
 244:	78 94       	sei
	volatile float ERROR_GX = gx_er/1000;
	volatile float ERROR_GY = gy_er/1000;
	volatile float ERROR_Gz = gz_er/1000;*/

	while (1){
		mpu_get_int_accel(&int_accel_new);
 246:	88 e1       	ldi	r24, 0x18	; 24
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 8c 06 	call	0xd18	; 0xd18 <mpu_get_int_accel>
		
		float Xaccel = (float)int_accel_new.x / 4966;
 24e:	e8 e1       	ldi	r30, 0x18	; 24
 250:	f1 e0       	ldi	r31, 0x01	; 1
 252:	60 81       	ld	r22, Z
 254:	71 81       	ldd	r23, Z+1	; 0x01
 256:	07 2e       	mov	r0, r23
 258:	00 0c       	add	r0, r0
 25a:	88 0b       	sbc	r24, r24
 25c:	99 0b       	sbc	r25, r25
 25e:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e3       	ldi	r19, 0x30	; 48
 266:	4b e9       	ldi	r20, 0x9B	; 155
 268:	55 e4       	ldi	r21, 0x45	; 69
 26a:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 26e:	4b 01       	movw	r8, r22
 270:	5c 01       	movw	r10, r24
		float Yaccel = (float)int_accel_new.y / 4966;
 272:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <int_accel_new+0x2>
 276:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <int_accel_new+0x3>
 27a:	07 2e       	mov	r0, r23
 27c:	00 0c       	add	r0, r0
 27e:	88 0b       	sbc	r24, r24
 280:	99 0b       	sbc	r25, r25
 282:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e3       	ldi	r19, 0x30	; 48
 28a:	4b e9       	ldi	r20, 0x9B	; 155
 28c:	55 e4       	ldi	r21, 0x45	; 69
 28e:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 292:	2b 01       	movw	r4, r22
 294:	3c 01       	movw	r6, r24
		float Zaccel = (float)int_accel_new.z / 4966;
 296:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <int_accel_new+0x4>
 29a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <int_accel_new+0x5>
 29e:	07 2e       	mov	r0, r23
 2a0:	00 0c       	add	r0, r0
 2a2:	88 0b       	sbc	r24, r24
 2a4:	99 0b       	sbc	r25, r25
 2a6:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e3       	ldi	r19, 0x30	; 48
 2ae:	4b e9       	ldi	r20, 0x9B	; 155
 2b0:	55 e4       	ldi	r21, 0x45	; 69
 2b2:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
		
		
		Xangle = (atan(Yaccel / sqrt(pow(Zaccel,2)+pow(Xaccel,2))) * 180/M_PI) + ERROR_ACCEL_X ;
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	50 e4       	ldi	r21, 0x40	; 64
 2be:	0e 94 f5 05 	call	0xbea	; 0xbea <pow>
 2c2:	6b 01       	movw	r12, r22
 2c4:	7c 01       	movw	r14, r24
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	50 e4       	ldi	r21, 0x40	; 64
 2ce:	c5 01       	movw	r24, r10
 2d0:	b4 01       	movw	r22, r8
 2d2:	0e 94 f5 05 	call	0xbea	; 0xbea <pow>
 2d6:	69 83       	std	Y+1, r22	; 0x01
 2d8:	7a 83       	std	Y+2, r23	; 0x02
 2da:	8b 83       	std	Y+3, r24	; 0x03
 2dc:	9c 83       	std	Y+4, r25	; 0x04
 2de:	29 81       	ldd	r18, Y+1	; 0x01
 2e0:	3a 81       	ldd	r19, Y+2	; 0x02
 2e2:	4b 81       	ldd	r20, Y+3	; 0x03
 2e4:	5c 81       	ldd	r21, Y+4	; 0x04
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 2ee:	0e 94 45 06 	call	0xc8a	; 0xc8a <sqrt>
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	c3 01       	movw	r24, r6
 2f8:	b2 01       	movw	r22, r4
 2fa:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 2fe:	0e 94 6d 08 	call	0x10da	; 0x10da <atan>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	44 e3       	ldi	r20, 0x34	; 52
 308:	53 e4       	ldi	r21, 0x43	; 67
 30a:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 30e:	2b ed       	ldi	r18, 0xDB	; 219
 310:	3f e0       	ldi	r19, 0x0F	; 15
 312:	49 e4       	ldi	r20, 0x49	; 73
 314:	50 e4       	ldi	r21, 0x40	; 64
 316:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 31a:	2e e0       	ldi	r18, 0x0E	; 14
 31c:	3f e4       	ldi	r19, 0x4F	; 79
 31e:	4f e4       	ldi	r20, 0x4F	; 79
 320:	5f e3       	ldi	r21, 0x3F	; 63
 322:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__subsf3>
 326:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <Xangle>
 32a:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <Xangle+0x1>
 32e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Xangle+0x2>
 332:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <Xangle+0x3>
		Yangle = ((-1)*atan(Xaccel / sqrt(pow(Zaccel,2)+pow(Yaccel,2))) * 180/M_PI) + ERROR_ACCEL_Y;
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	50 e4       	ldi	r21, 0x40	; 64
 33e:	c3 01       	movw	r24, r6
 340:	b2 01       	movw	r22, r4
 342:	0e 94 f5 05 	call	0xbea	; 0xbea <pow>
 346:	2b 01       	movw	r4, r22
 348:	3c 01       	movw	r6, r24
 34a:	a3 01       	movw	r20, r6
 34c:	92 01       	movw	r18, r4
 34e:	c7 01       	movw	r24, r14
 350:	b6 01       	movw	r22, r12
 352:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 356:	0e 94 45 06 	call	0xc8a	; 0xc8a <sqrt>
 35a:	9b 01       	movw	r18, r22
 35c:	ac 01       	movw	r20, r24
 35e:	c5 01       	movw	r24, r10
 360:	b4 01       	movw	r22, r8
 362:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 366:	0e 94 6d 08 	call	0x10da	; 0x10da <atan>
 36a:	90 58       	subi	r25, 0x80	; 128
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	44 e3       	ldi	r20, 0x34	; 52
 372:	53 e4       	ldi	r21, 0x43	; 67
 374:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 378:	2b ed       	ldi	r18, 0xDB	; 219
 37a:	3f e0       	ldi	r19, 0x0F	; 15
 37c:	49 e4       	ldi	r20, 0x49	; 73
 37e:	50 e4       	ldi	r21, 0x40	; 64
 380:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 384:	2d e1       	ldi	r18, 0x1D	; 29
 386:	3a e5       	ldi	r19, 0x5A	; 90
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	50 e4       	ldi	r21, 0x40	; 64
 38c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 390:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <Yangle>
 394:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <Yangle+0x1>
 398:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Yangle+0x2>
 39c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Yangle+0x3>
		
		mpu_get_gyro_accel(&int_gyro);
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <mpu_get_gyro_accel>
		elepsedTime = (float)milis/10000; //in seconds
 3a8:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <milis>
 3ac:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <milis+0x1>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 51 07 	call	0xea2	; 0xea2 <__floatunsisf>
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e4       	ldi	r19, 0x40	; 64
 3bc:	4c e1       	ldi	r20, 0x1C	; 28
 3be:	56 e4       	ldi	r21, 0x46	; 70
 3c0:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 3c4:	6b 01       	movw	r12, r22
 3c6:	7c 01       	movw	r14, r24
 3c8:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <elepsedTime>
 3cc:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <elepsedTime+0x1>
 3d0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <elepsedTime+0x2>
 3d4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <elepsedTime+0x3>
		milis = 0;
 3d8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <milis+0x1>
 3dc:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <milis>
		
		float Xgyro = (float)int_gyro.x /131 + ERROR_GYRO_X;
 3e0:	e2 e0       	ldi	r30, 0x02	; 2
 3e2:	f1 e0       	ldi	r31, 0x01	; 1
 3e4:	60 81       	ld	r22, Z
 3e6:	71 81       	ldd	r23, Z+1	; 0x01
 3e8:	07 2e       	mov	r0, r23
 3ea:	00 0c       	add	r0, r0
 3ec:	88 0b       	sbc	r24, r24
 3ee:	99 0b       	sbc	r25, r25
 3f0:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	43 e0       	ldi	r20, 0x03	; 3
 3fa:	53 e4       	ldi	r21, 0x43	; 67
 3fc:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 400:	2f e1       	ldi	r18, 0x1F	; 31
 402:	35 e8       	ldi	r19, 0x85	; 133
 404:	4b ec       	ldi	r20, 0xCB	; 203
 406:	5f e3       	ldi	r21, 0x3F	; 63
 408:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 40c:	2b 01       	movw	r4, r22
 40e:	3c 01       	movw	r6, r24
		float Ygyro = ((float)int_gyro.y +ERROR_GYRO_Y) /131 ;
 410:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <int_gyro+0x2>
 414:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <int_gyro+0x3>
 418:	07 2e       	mov	r0, r23
 41a:	00 0c       	add	r0, r0
 41c:	88 0b       	sbc	r24, r24
 41e:	99 0b       	sbc	r25, r25
 420:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 424:	2f ec       	ldi	r18, 0xCF	; 207
 426:	36 e9       	ldi	r19, 0x96	; 150
 428:	4e e2       	ldi	r20, 0x2E	; 46
 42a:	53 e4       	ldi	r21, 0x43	; 67
 42c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	43 e0       	ldi	r20, 0x03	; 3
 436:	53 e4       	ldi	r21, 0x43	; 67
 438:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 43c:	4b 01       	movw	r8, r22
 43e:	5c 01       	movw	r10, r24
		float Zgyro = (float)int_gyro.z / 131  + ERROR_GYRO_Z ;
 440:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <int_gyro+0x4>
 444:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <int_gyro+0x5>
 448:	07 2e       	mov	r0, r23
 44a:	00 0c       	add	r0, r0
 44c:	88 0b       	sbc	r24, r24
 44e:	99 0b       	sbc	r25, r25
 450:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	43 e0       	ldi	r20, 0x03	; 3
 45a:	53 e4       	ldi	r21, 0x43	; 67
 45c:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 460:	2d e3       	ldi	r18, 0x3D	; 61
 462:	3a e0       	ldi	r19, 0x0A	; 10
 464:	47 eb       	ldi	r20, 0xB7	; 183
 466:	5f e3       	ldi	r21, 0x3F	; 63
 468:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 46c:	69 83       	std	Y+1, r22	; 0x01
 46e:	7a 83       	std	Y+2, r23	; 0x02
 470:	8b 83       	std	Y+3, r24	; 0x03
 472:	9c 83       	std	Y+4, r25	; 0x04

		gyroAngleX = gyroAngleX + Xgyro*elepsedTime;
 474:	a3 01       	movw	r20, r6
 476:	92 01       	movw	r18, r4
 478:	c7 01       	movw	r24, r14
 47a:	b6 01       	movw	r22, r12
 47c:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 480:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <gyroAngleX>
 484:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <gyroAngleX+0x1>
 488:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <gyroAngleX+0x2>
 48c:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <gyroAngleX+0x3>
 490:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 494:	2b 01       	movw	r4, r22
 496:	3c 01       	movw	r6, r24
 498:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <gyroAngleX>
 49c:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <gyroAngleX+0x1>
 4a0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gyroAngleX+0x2>
 4a4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <gyroAngleX+0x3>
		gyroAngleY = gyroAngleY + Ygyro*elepsedTime;
 4a8:	a5 01       	movw	r20, r10
 4aa:	94 01       	movw	r18, r8
 4ac:	c7 01       	movw	r24, r14
 4ae:	b6 01       	movw	r22, r12
 4b0:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 4b4:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <gyroAngleY>
 4b8:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <gyroAngleY+0x1>
 4bc:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <gyroAngleY+0x2>
 4c0:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <gyroAngleY+0x3>
 4c4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 4c8:	4b 01       	movw	r8, r22
 4ca:	5c 01       	movw	r10, r24
 4cc:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <gyroAngleY>
 4d0:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <gyroAngleY+0x1>
 4d4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <gyroAngleY+0x2>
 4d8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <gyroAngleY+0x3>
		gyroAngleZ = gyroAngleZ + Zgyro*elepsedTime;
 4dc:	29 81       	ldd	r18, Y+1	; 0x01
 4de:	3a 81       	ldd	r19, Y+2	; 0x02
 4e0:	4b 81       	ldd	r20, Y+3	; 0x03
 4e2:	5c 81       	ldd	r21, Y+4	; 0x04
 4e4:	c7 01       	movw	r24, r14
 4e6:	b6 01       	movw	r22, r12
 4e8:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 4ec:	6b 01       	movw	r12, r22
 4ee:	7c 01       	movw	r14, r24
 4f0:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <gyroAngleZ>
 4f4:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <gyroAngleZ+0x1>
 4f8:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <gyroAngleZ+0x2>
 4fc:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <gyroAngleZ+0x3>
 500:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 504:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <gyroAngleZ>
 508:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <gyroAngleZ+0x1>
 50c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <gyroAngleZ+0x2>
 510:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <gyroAngleZ+0x3>
		yaw = yaw + Zgyro*elepsedTime;					// 90 -> +8 -90 -> -8
 514:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <yaw>
 518:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <yaw+0x1>
 51c:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <yaw+0x2>
 520:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <yaw+0x3>
 524:	c7 01       	movw	r24, r14
 526:	b6 01       	movw	r22, r12
 528:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 52c:	6b 01       	movw	r12, r22
 52e:	7c 01       	movw	r14, r24
 530:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <yaw>
 534:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <yaw+0x1>
 538:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <yaw+0x2>
 53c:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <yaw+0x3>
		roll = 0.97*gyroAngleX + 0.03*Xangle;			//90 -> +12 -90 -> -12
 540:	2c ee       	ldi	r18, 0xEC	; 236
 542:	31 e5       	ldi	r19, 0x51	; 81
 544:	48 e7       	ldi	r20, 0x78	; 120
 546:	5f e3       	ldi	r21, 0x3F	; 63
 548:	c3 01       	movw	r24, r6
 54a:	b2 01       	movw	r22, r4
 54c:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 550:	2b 01       	movw	r4, r22
 552:	3c 01       	movw	r6, r24
 554:	2f e8       	ldi	r18, 0x8F	; 143
 556:	32 ec       	ldi	r19, 0xC2	; 194
 558:	45 ef       	ldi	r20, 0xF5	; 245
 55a:	5c e3       	ldi	r21, 0x3C	; 60
 55c:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <Xangle>
 560:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <Xangle+0x1>
 564:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Xangle+0x2>
 568:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <Xangle+0x3>
 56c:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 570:	9b 01       	movw	r18, r22
 572:	ac 01       	movw	r20, r24
 574:	c3 01       	movw	r24, r6
 576:	b2 01       	movw	r22, r4
 578:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 57c:	2b 01       	movw	r4, r22
 57e:	3c 01       	movw	r6, r24
 580:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <roll>
 584:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <roll+0x1>
 588:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <roll+0x2>
 58c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <roll+0x3>
		pitch = 0.97*gyroAngleY + 0.03*Yangle;			//90 -> +12 -90 -> -12
 590:	2c ee       	ldi	r18, 0xEC	; 236
 592:	31 e5       	ldi	r19, 0x51	; 81
 594:	48 e7       	ldi	r20, 0x78	; 120
 596:	5f e3       	ldi	r21, 0x3F	; 63
 598:	c5 01       	movw	r24, r10
 59a:	b4 01       	movw	r22, r8
 59c:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 5a0:	4b 01       	movw	r8, r22
 5a2:	5c 01       	movw	r10, r24
 5a4:	2f e8       	ldi	r18, 0x8F	; 143
 5a6:	32 ec       	ldi	r19, 0xC2	; 194
 5a8:	45 ef       	ldi	r20, 0xF5	; 245
 5aa:	5c e3       	ldi	r21, 0x3C	; 60
 5ac:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <Yangle>
 5b0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <Yangle+0x1>
 5b4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Yangle+0x2>
 5b8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Yangle+0x3>
 5bc:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 5c0:	9b 01       	movw	r18, r22
 5c2:	ac 01       	movw	r20, r24
 5c4:	c5 01       	movw	r24, r10
 5c6:	b4 01       	movw	r22, r8
 5c8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 5cc:	4b 01       	movw	r8, r22
 5ce:	5c 01       	movw	r10, r24
 5d0:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <_end>
 5d4:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <_end+0x1>
 5d8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_end+0x2>
 5dc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_end+0x3>

		//calculate_servo_value(&servo0, &servo1, &servo2,yaw,roll,pitch);
		//yawOld = sqrt((pow(yaw,2) + pow(yawOld,2))/2);
		//rollOld = sqrt((pow(roll,2) + pow(rollOld,2))/2);
		//pitchOld = sqrt((pow(pitch,2) + pow(pitchOld,2))/2);
		servo0.value = (int)(yaw*1000/4  + START_VALUE_1 ) ;			//2000 na 90 stopni -> 90 stopni = 8(gyro) * 1000 = 8000(chcemy inta) -> 8000/4 = 2000 ->>>>OK DZIALA
 5e0:	20 e0       	ldi	r18, 0x00	; 0
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	4a e7       	ldi	r20, 0x7A	; 122
 5e6:	54 e4       	ldi	r21, 0x44	; 68
 5e8:	c7 01       	movw	r24, r14
 5ea:	b6 01       	movw	r22, r12
 5ec:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	40 e8       	ldi	r20, 0x80	; 128
 5f6:	5e e3       	ldi	r21, 0x3E	; 62
 5f8:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	30 e1       	ldi	r19, 0x10	; 16
 600:	4c e3       	ldi	r20, 0x3C	; 60
 602:	55 e4       	ldi	r21, 0x45	; 69
 604:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 608:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
 60c:	7a 83       	std	Y+2, r23	; 0x02
 60e:	69 83       	std	Y+1, r22	; 0x01
 610:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <servo0+0x3>
 614:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <servo0+0x2>
		servo1.value = (int)(- pitch*1000/6 + START_VALUE_2);			//2000 na 90 stopni -> 90 stopni = 12* 1000 = 12000(chcemy inta) -> 8000/6 = 2000 ->>>>OK DZIALA
 618:	c5 01       	movw	r24, r10
 61a:	b4 01       	movw	r22, r8
 61c:	90 58       	subi	r25, 0x80	; 128
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	4a e7       	ldi	r20, 0x7A	; 122
 624:	54 e4       	ldi	r21, 0x44	; 68
 626:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	40 ec       	ldi	r20, 0xC0	; 192
 630:	50 e4       	ldi	r21, 0x40	; 64
 632:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	48 e4       	ldi	r20, 0x48	; 72
 63c:	55 e4       	ldi	r21, 0x45	; 69
 63e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 642:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
 646:	8b 01       	movw	r16, r22
 648:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <servo1+0x3>
 64c:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <servo1+0x2>
		servo2.value = (int)( roll*1000/6 + START_VALUE_3);				//2000 na 90 stopni -> 90 stopni = 12* 1000 = 12000(chcemy inta) -> 8000/6 = 2000 ->>>>
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	4a e7       	ldi	r20, 0x7A	; 122
 656:	54 e4       	ldi	r21, 0x44	; 68
 658:	c3 01       	movw	r24, r6
 65a:	b2 01       	movw	r22, r4
 65c:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 660:	20 e0       	ldi	r18, 0x00	; 0
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	40 ec       	ldi	r20, 0xC0	; 192
 666:	50 e4       	ldi	r21, 0x40	; 64
 668:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
 66c:	20 e0       	ldi	r18, 0x00	; 0
 66e:	30 e2       	ldi	r19, 0x20	; 32
 670:	47 e3       	ldi	r20, 0x37	; 55
 672:	55 e4       	ldi	r21, 0x45	; 69
 674:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 678:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
 67c:	9b 01       	movw	r18, r22
 67e:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <servo2+0x3>
 682:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <servo2+0x2>
		
		if( servo0.value >= 4400)
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	9a 81       	ldd	r25, Y+2	; 0x02
 68a:	80 33       	cpi	r24, 0x30	; 48
 68c:	91 41       	sbci	r25, 0x11	; 17
 68e:	34 f0       	brlt	.+12     	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
			servo0.value = 4400;
 690:	80 e3       	ldi	r24, 0x30	; 48
 692:	91 e1       	ldi	r25, 0x11	; 17
 694:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <servo0+0x3>
 698:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <servo0+0x2>
		if( servo0.value <= 1500)
 69c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <servo0+0x2>
 6a0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <servo0+0x3>
 6a4:	8d 3d       	cpi	r24, 0xDD	; 221
 6a6:	95 40       	sbci	r25, 0x05	; 5
 6a8:	34 f4       	brge	.+12     	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
			servo0.value = 1500;
 6aa:	8c ed       	ldi	r24, 0xDC	; 220
 6ac:	95 e0       	ldi	r25, 0x05	; 5
 6ae:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <servo0+0x3>
 6b2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <servo0+0x2>
		if( servo1.value >= 4400)
 6b6:	00 33       	cpi	r16, 0x30	; 48
 6b8:	11 41       	sbci	r17, 0x11	; 17
 6ba:	34 f0       	brlt	.+12     	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
			servo1.value = 4400;
 6bc:	80 e3       	ldi	r24, 0x30	; 48
 6be:	91 e1       	ldi	r25, 0x11	; 17
 6c0:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <servo1+0x3>
 6c4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <servo1+0x2>
		if( servo1.value <= 2000)
 6c8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <servo1+0x2>
 6cc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <servo1+0x3>
 6d0:	81 3d       	cpi	r24, 0xD1	; 209
 6d2:	97 40       	sbci	r25, 0x07	; 7
 6d4:	34 f4       	brge	.+12     	; 0x6e2 <__EEPROM_REGION_LENGTH__+0x2e2>
			servo1.value = 2000;
 6d6:	80 ed       	ldi	r24, 0xD0	; 208
 6d8:	97 e0       	ldi	r25, 0x07	; 7
 6da:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <servo1+0x3>
 6de:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <servo1+0x2>
		if( servo2.value >= 4400)
 6e2:	20 33       	cpi	r18, 0x30	; 48
 6e4:	31 41       	sbci	r19, 0x11	; 17
 6e6:	34 f0       	brlt	.+12     	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
			servo2.value = 4400;
 6e8:	80 e3       	ldi	r24, 0x30	; 48
 6ea:	91 e1       	ldi	r25, 0x11	; 17
 6ec:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <servo2+0x3>
 6f0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <servo2+0x2>
		if( servo2.value <= 1500)
 6f4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <servo2+0x2>
 6f8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <servo2+0x3>
 6fc:	8d 3d       	cpi	r24, 0xDD	; 221
 6fe:	95 40       	sbci	r25, 0x05	; 5
 700:	34 f4       	brge	.+12     	; 0x70e <__EEPROM_REGION_LENGTH__+0x30e>
			servo2.value = 1500;
 702:	8c ed       	ldi	r24, 0xDC	; 220
 704:	95 e0       	ldi	r25, 0x05	; 5
 706:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <servo2+0x3>
 70a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <servo2+0x2>
	float elepsedTime;
//------------- END global inicjalizations -------------------


int main(void)
{	 
 70e:	1a 86       	std	Y+10, r1	; 0x0a
 710:	19 86       	std	Y+9, r1	; 0x09
 712:	00 e0       	ldi	r16, 0x00	; 0
 714:	10 e0       	ldi	r17, 0x00	; 0
 716:	21 2c       	mov	r2, r1
 718:	31 2c       	mov	r3, r1
 71a:	41 2c       	mov	r4, r1
 71c:	51 2c       	mov	r5, r1
 71e:	ce c0       	rjmp	.+412    	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
		int integral0 = 0;
		int integral1 = 0;
		int integral2 = 0;
		
		for(int i=0; i<50; i++){
			int curentposition0 = OCR1A;
 720:	a0 90 88 00 	lds	r10, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 724:	b0 90 89 00 	lds	r11, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			int curentposition1 = OCR1B;
 728:	60 90 8a 00 	lds	r6, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 72c:	70 90 8b 00 	lds	r7, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
			int curentposition2 = OCR3A;
 730:	e0 90 98 00 	lds	r14, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 734:	f0 90 99 00 	lds	r15, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
			
			int error0 = servo0.value - curentposition0;
 738:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <servo0+0x2>
 73c:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <servo0+0x3>
 740:	6a 19       	sub	r22, r10
 742:	7b 09       	sbc	r23, r11
			int error1 = servo1.value - curentposition1;
 744:	80 90 30 01 	lds	r8, 0x0130	; 0x800130 <servo1+0x2>
 748:	90 90 31 01 	lds	r9, 0x0131	; 0x800131 <servo1+0x3>
 74c:	86 18       	sub	r8, r6
 74e:	97 08       	sbc	r9, r7
			int error2 = servo2.value - curentposition2;
 750:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <servo2+0x2>
 754:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <servo2+0x3>
 758:	6c 01       	movw	r12, r24
 75a:	ce 18       	sub	r12, r14
 75c:	df 08       	sbc	r13, r15
			
			integral0 += error0;
 75e:	46 0e       	add	r4, r22
 760:	57 1e       	adc	r5, r23
			integral1 += error1;
 762:	28 0c       	add	r2, r8
 764:	39 1c       	adc	r3, r9
			integral2 += error2;
 766:	0c 0d       	add	r16, r12
 768:	1d 1d       	adc	r17, r13
			
			curentposition0 += error0*0.3 + integral0*0.01;
 76a:	07 2e       	mov	r0, r23
 76c:	00 0c       	add	r0, r0
 76e:	88 0b       	sbc	r24, r24
 770:	99 0b       	sbc	r25, r25
 772:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 776:	2a e9       	ldi	r18, 0x9A	; 154
 778:	39 e9       	ldi	r19, 0x99	; 153
 77a:	49 e9       	ldi	r20, 0x99	; 153
 77c:	5e e3       	ldi	r21, 0x3E	; 62
 77e:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 782:	69 83       	std	Y+1, r22	; 0x01
 784:	7a 83       	std	Y+2, r23	; 0x02
 786:	8b 83       	std	Y+3, r24	; 0x03
 788:	9c 83       	std	Y+4, r25	; 0x04
 78a:	b2 01       	movw	r22, r4
 78c:	05 2c       	mov	r0, r5
 78e:	00 0c       	add	r0, r0
 790:	88 0b       	sbc	r24, r24
 792:	99 0b       	sbc	r25, r25
 794:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 798:	2a e0       	ldi	r18, 0x0A	; 10
 79a:	37 ed       	ldi	r19, 0xD7	; 215
 79c:	43 e2       	ldi	r20, 0x23	; 35
 79e:	5c e3       	ldi	r21, 0x3C	; 60
 7a0:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 7a4:	9b 01       	movw	r18, r22
 7a6:	ac 01       	movw	r20, r24
 7a8:	69 81       	ldd	r22, Y+1	; 0x01
 7aa:	7a 81       	ldd	r23, Y+2	; 0x02
 7ac:	8b 81       	ldd	r24, Y+3	; 0x03
 7ae:	9c 81       	ldd	r25, Y+4	; 0x04
 7b0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 7b4:	69 83       	std	Y+1, r22	; 0x01
 7b6:	7a 83       	std	Y+2, r23	; 0x02
 7b8:	8b 83       	std	Y+3, r24	; 0x03
 7ba:	9c 83       	std	Y+4, r25	; 0x04
 7bc:	b5 01       	movw	r22, r10
 7be:	bb 0c       	add	r11, r11
 7c0:	88 0b       	sbc	r24, r24
 7c2:	99 0b       	sbc	r25, r25
 7c4:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 7c8:	29 81       	ldd	r18, Y+1	; 0x01
 7ca:	3a 81       	ldd	r19, Y+2	; 0x02
 7cc:	4b 81       	ldd	r20, Y+3	; 0x03
 7ce:	5c 81       	ldd	r21, Y+4	; 0x04
 7d0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 7d4:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
 7d8:	69 83       	std	Y+1, r22	; 0x01
 7da:	7a 83       	std	Y+2, r23	; 0x02
 7dc:	8b 83       	std	Y+3, r24	; 0x03
 7de:	9c 83       	std	Y+4, r25	; 0x04
			curentposition1 += error1*0.3 + integral1*0.01;
 7e0:	b4 01       	movw	r22, r8
 7e2:	99 0c       	add	r9, r9
 7e4:	88 0b       	sbc	r24, r24
 7e6:	99 0b       	sbc	r25, r25
 7e8:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 7ec:	2a e9       	ldi	r18, 0x9A	; 154
 7ee:	39 e9       	ldi	r19, 0x99	; 153
 7f0:	49 e9       	ldi	r20, 0x99	; 153
 7f2:	5e e3       	ldi	r21, 0x3E	; 62
 7f4:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 7f8:	4b 01       	movw	r8, r22
 7fa:	5c 01       	movw	r10, r24
 7fc:	b1 01       	movw	r22, r2
 7fe:	03 2c       	mov	r0, r3
 800:	00 0c       	add	r0, r0
 802:	88 0b       	sbc	r24, r24
 804:	99 0b       	sbc	r25, r25
 806:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 80a:	2a e0       	ldi	r18, 0x0A	; 10
 80c:	37 ed       	ldi	r19, 0xD7	; 215
 80e:	43 e2       	ldi	r20, 0x23	; 35
 810:	5c e3       	ldi	r21, 0x3C	; 60
 812:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 816:	9b 01       	movw	r18, r22
 818:	ac 01       	movw	r20, r24
 81a:	c5 01       	movw	r24, r10
 81c:	b4 01       	movw	r22, r8
 81e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 822:	4b 01       	movw	r8, r22
 824:	5c 01       	movw	r10, r24
 826:	b3 01       	movw	r22, r6
 828:	77 0c       	add	r7, r7
 82a:	88 0b       	sbc	r24, r24
 82c:	99 0b       	sbc	r25, r25
 82e:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 832:	a5 01       	movw	r20, r10
 834:	94 01       	movw	r18, r8
 836:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 83a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
 83e:	6d 83       	std	Y+5, r22	; 0x05
 840:	7e 83       	std	Y+6, r23	; 0x06
 842:	8f 83       	std	Y+7, r24	; 0x07
 844:	98 87       	std	Y+8, r25	; 0x08
			curentposition2 += error2*0.3 + integral2*0.01;
 846:	b6 01       	movw	r22, r12
 848:	dd 0c       	add	r13, r13
 84a:	88 0b       	sbc	r24, r24
 84c:	99 0b       	sbc	r25, r25
 84e:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 852:	2a e9       	ldi	r18, 0x9A	; 154
 854:	39 e9       	ldi	r19, 0x99	; 153
 856:	49 e9       	ldi	r20, 0x99	; 153
 858:	5e e3       	ldi	r21, 0x3E	; 62
 85a:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 85e:	4b 01       	movw	r8, r22
 860:	5c 01       	movw	r10, r24
 862:	b8 01       	movw	r22, r16
 864:	01 2e       	mov	r0, r17
 866:	00 0c       	add	r0, r0
 868:	88 0b       	sbc	r24, r24
 86a:	99 0b       	sbc	r25, r25
 86c:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 870:	2a e0       	ldi	r18, 0x0A	; 10
 872:	37 ed       	ldi	r19, 0xD7	; 215
 874:	43 e2       	ldi	r20, 0x23	; 35
 876:	5c e3       	ldi	r21, 0x3C	; 60
 878:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 87c:	9b 01       	movw	r18, r22
 87e:	ac 01       	movw	r20, r24
 880:	c5 01       	movw	r24, r10
 882:	b4 01       	movw	r22, r8
 884:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 888:	4b 01       	movw	r8, r22
 88a:	5c 01       	movw	r10, r24
 88c:	b7 01       	movw	r22, r14
 88e:	ff 0c       	add	r15, r15
 890:	88 0b       	sbc	r24, r24
 892:	99 0b       	sbc	r25, r25
 894:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 898:	a5 01       	movw	r20, r10
 89a:	94 01       	movw	r18, r8
 89c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 8a0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
			
			servo_update(curentposition0,curentposition1,curentposition2);
 8a4:	ab 01       	movw	r20, r22
 8a6:	6d 81       	ldd	r22, Y+5	; 0x05
 8a8:	7e 81       	ldd	r23, Y+6	; 0x06
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	9a 81       	ldd	r25, Y+2	; 0x02
 8ae:	0e 94 45 0a 	call	0x148a	; 0x148a <servo_update>
		
		int integral0 = 0;
		int integral1 = 0;
		int integral2 = 0;
		
		for(int i=0; i<50; i++){
 8b2:	89 85       	ldd	r24, Y+9	; 0x09
 8b4:	9a 85       	ldd	r25, Y+10	; 0x0a
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	9a 87       	std	Y+10, r25	; 0x0a
 8ba:	89 87       	std	Y+9, r24	; 0x09
 8bc:	e9 85       	ldd	r30, Y+9	; 0x09
 8be:	fa 85       	ldd	r31, Y+10	; 0x0a
 8c0:	f2 97       	sbiw	r30, 0x32	; 50
 8c2:	0c f4       	brge	.+2      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8c4:	2d cf       	rjmp	.-422    	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
 8c6:	bf cc       	rjmp	.-1666   	; 0x246 <main+0x88>

Disassembly of section .text.__vector_14:

000013f6 <__vector_14>:
	}
}


ISR(TIMER0_COMPA_vect) //call interruption
{
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
	milis++;
    1404:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <milis>
    1408:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <milis+0x1>
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <milis+0x1>
    1412:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <milis>
}
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	0f 90       	pop	r0
    1420:	1f 90       	pop	r1
    1422:	18 95       	reti

Disassembly of section .text.servo328PB_init:

00001196 <servo328PB_init>:
}


void servo328PB_init()
{
	DDRB = 0x6;
    1196:	86 e0       	ldi	r24, 0x06	; 6
    1198:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	8a b9       	out	0x0a, r24	; 10
	// PB1, PB2, PD0


	//TCCR1A = COM1A1, COM1B1, WGM11 - wysokie
	TCCR1A = 0xA2;
    119e:	82 ea       	ldi	r24, 0xA2	; 162
    11a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	//TCCR1B = WGM12, WGM13 - wysokie
	//TCCR1B = CS11 - prescale /8
	TCCR1B = 0x1A;
    11a4:	8a e1       	ldi	r24, 0x1A	; 26
    11a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	//fast PWM
	//similar setup for other
	// we don't need OCR2B
	TCCR3A = 0x82;
    11aa:	92 e8       	ldi	r25, 0x82	; 130
    11ac:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
	TCCR3B = 0x1A;
    11b0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>

	ICR1 = PWM_TOP;
    11b4:	8f e3       	ldi	r24, 0x3F	; 63
    11b6:	9c e9       	ldi	r25, 0x9C	; 156
    11b8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    11bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	ICR3 = PWM_TOP;
    11c0:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f8097>
    11c4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f8096>

	// initial setup servos
	OCR1A = 2999u;
    11c8:	87 eb       	ldi	r24, 0xB7	; 183
    11ca:	9b e0       	ldi	r25, 0x0B	; 11
    11cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    11d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 2999u;
    11d4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    11d8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR3A = 2999u;
    11dc:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    11e0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
    11e4:	08 95       	ret

Disassembly of section .text.servo_update:

0000148a <servo_update>:

}

void servo_update(int servo0,int servo1,int servo2){
	OCR1A = servo0;
    148a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    148e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = servo1;
    1492:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1496:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR3A = servo2;     // return x,y,z
    149a:	50 93 99 00 	sts	0x0099, r21	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    149e:	40 93 98 00 	sts	0x0098, r20	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
    14a2:	08 95       	ret

Disassembly of section .text.tw_start:

00001368 <tw_start>:
#include "twi_master.h"

static ret_code_t tw_start(void)
{
	/* Send START condition */
	TWCR0 =  (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
    1368:	84 ea       	ldi	r24, 0xA4	; 164
    136a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	/* Wait for TWINT flag to set */
	while (!(TWCR0 & (1 << TWINT)));
    136e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1372:	88 23       	and	r24, r24
    1374:	e4 f7       	brge	.-8      	; 0x136e <tw_start+0x6>
	
	/* Check error */
	if (TWSR0 != TW_START && TWSR0 != TW_REP_START)
    1376:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	41 f0       	breq	.+16     	; 0x138e <tw_start+0x26>
    137e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1382:	80 31       	cpi	r24, 0x10	; 16
    1384:	39 f0       	breq	.+14     	; 0x1394 <tw_start+0x2c>
	{
		return TWSR0;
    1386:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	08 95       	ret
	}

	return SUCCESS;
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	08 95       	ret
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
}
    1398:	08 95       	ret

Disassembly of section .text.tw_stop:

0000151c <tw_stop>:


static void tw_stop(void)
{
	/* Send STOP condition */
	TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    151c:	84 e9       	ldi	r24, 0x94	; 148
    151e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1522:	08 95       	ret

Disassembly of section .text.tw_write_sla:

00001332 <tw_write_sla>:


static ret_code_t tw_write_sla(uint8_t sla)
{
	/* Transmit slave address with read/write flag */
	TWDR0 = sla;
    1332:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1 << TWINT) | (1 << TWEN);
    1336:	84 e8       	ldi	r24, 0x84	; 132
    1338:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	/* Wait for TWINT flag to set */
	while (!(TWCR0 & (1 << TWINT)));
    133c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1340:	88 23       	and	r24, r24
    1342:	e4 f7       	brge	.-8      	; 0x133c <tw_write_sla+0xa>
	if (TWSR0 != TW_MT_SLA_ACK && TWSR0 != TW_MR_SLA_ACK)
    1344:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1348:	88 31       	cpi	r24, 0x18	; 24
    134a:	41 f0       	breq	.+16     	; 0x135c <tw_write_sla+0x2a>
    134c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1350:	80 34       	cpi	r24, 0x40	; 64
    1352:	39 f0       	breq	.+14     	; 0x1362 <tw_write_sla+0x30>
	{
		return TWSR0;
    1354:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	08 95       	ret
		
		    
	}
	return SUCCESS;
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	08 95       	ret
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
}
    1366:	08 95       	ret

Disassembly of section .text.tw_write:

00001424 <tw_write>:


static ret_code_t tw_write(uint8_t data)
{
	/* Transmit 1 byte*/
	TWDR0 = data;
    1424:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1 << TWINT) | (1 << TWEN);
    1428:	84 e8       	ldi	r24, 0x84	; 132
    142a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	/* Wait for TWINT flag to set */
	while (!(TWCR0 & (1 << TWINT)));
    142e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1432:	88 23       	and	r24, r24
    1434:	e4 f7       	brge	.-8      	; 0x142e <tw_write+0xa>
	if (TWSR0 != TW_MT_DATA_ACK)
    1436:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    143a:	88 32       	cpi	r24, 0x28	; 40
    143c:	21 f0       	breq	.+8      	; 0x1446 <tw_write+0x22>
	{
		return TWSR0;
    143e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	08 95       	ret
	}
	
	return SUCCESS;
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
}
    144a:	08 95       	ret

Disassembly of section .text.tw_read:

00001278 <tw_read>:


static uint8_t tw_read(bool read_ack)
{
	if (read_ack)
    1278:	88 23       	and	r24, r24
    127a:	71 f0       	breq	.+28     	; 0x1298 <tw_read+0x20>
	{
		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    127c:	84 ec       	ldi	r24, 0xC4	; 196
    127e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR0 & (1 << TWINT)));
    1282:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1286:	88 23       	and	r24, r24
    1288:	e4 f7       	brge	.-8      	; 0x1282 <tw_read+0xa>
		if (TWSR0 != TW_MR_DATA_ACK)
    128a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    128e:	80 35       	cpi	r24, 0x50	; 80
    1290:	89 f0       	breq	.+34     	; 0x12b4 <tw_read+0x3c>
		{
			return TWSR0;
    1292:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1296:	08 95       	ret
		}
	}
	else
	{
		TWCR0 = (1 << TWINT) | (1 << TWEN);
    1298:	84 e8       	ldi	r24, 0x84	; 132
    129a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR0 & (1 << TWINT)));
    129e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    12a2:	88 23       	and	r24, r24
    12a4:	e4 f7       	brge	.-8      	; 0x129e <tw_read+0x26>
		if (TWSR0 != TW_MR_DATA_NACK)
    12a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    12aa:	88 35       	cpi	r24, 0x58	; 88
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <tw_read+0x3c>
		{
			return TWSR0;
    12ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    12b2:	08 95       	ret
		}
	}
	uint8_t data = TWDR0;
    12b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	return data;
}
    12b8:	08 95       	ret

Disassembly of section .text.tw_init:

000012ba <tw_init>:


void tw_init(twi_freq_mode_t twi_freq_mode, bool pullup_en)
{
	DDRC  |= (1 << TW_SDA_PIN) | (1 << TW_SCL_PIN);
    12ba:	97 b1       	in	r25, 0x07	; 7
    12bc:	90 63       	ori	r25, 0x30	; 48
    12be:	97 b9       	out	0x07, r25	; 7
	if (pullup_en)
    12c0:	66 23       	and	r22, r22
    12c2:	21 f0       	breq	.+8      	; 0x12cc <tw_init+0x12>
	{
		PORTC |= (1 << TW_SDA_PIN) | (1 << TW_SCL_PIN);
    12c4:	98 b1       	in	r25, 0x08	; 8
    12c6:	90 63       	ori	r25, 0x30	; 48
    12c8:	98 b9       	out	0x08, r25	; 8
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <tw_init+0x18>
	}
	else
	{
		PORTC &= ~((1 << TW_SDA_PIN) | (1 << TW_SCL_PIN));
    12cc:	98 b1       	in	r25, 0x08	; 8
    12ce:	9f 7c       	andi	r25, 0xCF	; 207
    12d0:	98 b9       	out	0x08, r25	; 8
	}
	DDRC  &= ~((1 << TW_SDA_PIN) | (1 << TW_SCL_PIN));
    12d2:	97 b1       	in	r25, 0x07	; 7
    12d4:	9f 7c       	andi	r25, 0xCF	; 207
    12d6:	97 b9       	out	0x07, r25	; 7
	
	switch (twi_freq_mode)
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	41 f0       	breq	.+16     	; 0x12ec <tw_init+0x32>
    12dc:	18 f0       	brcs	.+6      	; 0x12e4 <tw_init+0x2a>
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	49 f0       	breq	.+18     	; 0x12f4 <tw_init+0x3a>
    12e2:	08 95       	ret
	{
		case TW_FREQ_100K:
		/* Set bit rate register 72 and prescaler to 1 resulting in
		SCL_freq = 16MHz/(16 + 2*72*1) = 100KHz	*/
		TWBR0 = 72;
    12e4:	88 e4       	ldi	r24, 0x48	; 72
    12e6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
		break;
    12ea:	08 95       	ret
		
		case TW_FREQ_250K:
		/* Set bit rate register 24 and prescaler to 1 resulting in
		SCL_freq = 16MHz/(16 + 2*24*1) = 250KHz	*/
		TWBR0 = 24;
    12ec:	88 e1       	ldi	r24, 0x18	; 24
    12ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
		break;
    12f2:	08 95       	ret
		
		case TW_FREQ_400K:
		/* Set bit rate register 12 and prescaler to 1 resulting in
		SCL_freq = 16MHz/(16 + 2*12*1) = 400KHz	*/
		TWBR0 = 12;
    12f4:	8c e0       	ldi	r24, 0x0C	; 12
    12f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    12fa:	08 95       	ret

Disassembly of section .text.tw_master_transmit:

00001008 <tw_master_transmit>:
	}
}


ret_code_t tw_master_transmit(uint8_t slave_addr, uint8_t* p_data, uint8_t len, bool repeat_start)
{
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	c8 2f       	mov	r28, r24
    1016:	7b 01       	movw	r14, r22
    1018:	14 2f       	mov	r17, r20
    101a:	02 2f       	mov	r16, r18
	ret_code_t error_code;
	
	/* Send START condition */
	error_code = tw_start();
    101c:	0e 94 b4 09 	call	0x1368	; 0x1368 <tw_start>
	if (error_code != SUCCESS)
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	01 f5       	brne	.+64     	; 0x1064 <tw_master_transmit+0x5c>
	{
		return error_code;
	}
	
	/* Send slave address with WRITE flag */
	error_code = tw_write_sla(TW_SLA_W(slave_addr));
    1024:	8c 2f       	mov	r24, r28
    1026:	88 0f       	add	r24, r24
    1028:	0e 94 99 09 	call	0x1332	; 0x1332 <tw_write_sla>
	if (error_code != SUCCESS)
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	d1 f4       	brne	.+52     	; 0x1064 <tw_master_transmit+0x5c>
    1030:	c0 e0       	ldi	r28, 0x00	; 0
    1032:	d0 e0       	ldi	r29, 0x00	; 0
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <tw_master_transmit+0x40>
	}
	
	/* Send data byte in single or burst mode */
	for (int i = 0; i < len; ++i)
	{
		error_code = tw_write(p_data[i]);
    1036:	f7 01       	movw	r30, r14
    1038:	ec 0f       	add	r30, r28
    103a:	fd 1f       	adc	r31, r29
    103c:	80 81       	ld	r24, Z
    103e:	0e 94 12 0a 	call	0x1424	; 0x1424 <tw_write>
		if (error_code != SUCCESS)
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	79 f4       	brne	.+30     	; 0x1064 <tw_master_transmit+0x5c>
	{
		return error_code;
	}
	
	/* Send data byte in single or burst mode */
	for (int i = 0; i < len; ++i)
    1046:	21 96       	adiw	r28, 0x01	; 1
    1048:	81 2f       	mov	r24, r17
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	c8 17       	cp	r28, r24
    104e:	d9 07       	cpc	r29, r25
    1050:	94 f3       	brlt	.-28     	; 0x1036 <tw_master_transmit+0x2e>
		{
			return error_code;
		}
	}
	
	if (!repeat_start)
    1052:	01 11       	cpse	r16, r1
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <tw_master_transmit+0x58>
	{
		/* Send STOP condition */
		tw_stop();
    1056:	0e 94 8e 0a 	call	0x151c	; 0x151c <tw_stop>
	}
	
	return SUCCESS;
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <tw_master_transmit+0x5c>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
}
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	08 95       	ret

Disassembly of section .text.tw_master_receive:

00000e24 <tw_master_receive>:


ret_code_t tw_master_receive(uint8_t slave_addr, uint8_t* p_data, uint8_t len)
{
 e24:	cf 92       	push	r12
 e26:	df 92       	push	r13
 e28:	ff 92       	push	r15
 e2a:	0f 93       	push	r16
 e2c:	1f 93       	push	r17
 e2e:	cf 93       	push	r28
 e30:	df 93       	push	r29
 e32:	c8 2f       	mov	r28, r24
 e34:	8b 01       	movw	r16, r22
 e36:	f4 2e       	mov	r15, r20
	ret_code_t error_code;
	
	/* Send START condition */
	error_code = tw_start();
 e38:	0e 94 b4 09 	call	0x1368	; 0x1368 <tw_start>
 e3c:	9c 01       	movw	r18, r24
	if (error_code != SUCCESS)
 e3e:	00 97       	sbiw	r24, 0x00	; 0
 e40:	39 f5       	brne	.+78     	; 0xe90 <tw_master_receive+0x6c>
	{
		return error_code;
	}
	
	/* Write slave address with READ flag */
	error_code = tw_write_sla(TW_SLA_R(slave_addr));
 e42:	8c 2f       	mov	r24, r28
 e44:	90 e0       	ldi	r25, 0x00	; 0
 e46:	88 0f       	add	r24, r24
 e48:	99 1f       	adc	r25, r25
 e4a:	81 60       	ori	r24, 0x01	; 1
 e4c:	0e 94 99 09 	call	0x1332	; 0x1332 <tw_write_sla>
	if (error_code != SUCCESS)
 e50:	00 97       	sbiw	r24, 0x00	; 0
 e52:	f9 f4       	brne	.+62     	; 0xe92 <tw_master_receive+0x6e>
 e54:	c0 e0       	ldi	r28, 0x00	; 0
 e56:	d0 e0       	ldi	r29, 0x00	; 0
 e58:	09 c0       	rjmp	.+18     	; 0xe6c <tw_master_receive+0x48>
	}
	
	/* Read single or multiple data byte and send ack */
	for (int i = 0; i < len-1; ++i)
	{
		p_data[i] = tw_read(TW_READ_ACK);
 e5a:	68 01       	movw	r12, r16
 e5c:	cc 0e       	add	r12, r28
 e5e:	dd 1e       	adc	r13, r29
 e60:	81 e0       	ldi	r24, 0x01	; 1
 e62:	0e 94 3c 09 	call	0x1278	; 0x1278 <tw_read>
 e66:	f6 01       	movw	r30, r12
 e68:	80 83       	st	Z, r24
	{
		return error_code;
	}
	
	/* Read single or multiple data byte and send ack */
	for (int i = 0; i < len-1; ++i)
 e6a:	21 96       	adiw	r28, 0x01	; 1
 e6c:	8f 2d       	mov	r24, r15
 e6e:	90 e0       	ldi	r25, 0x00	; 0
 e70:	01 97       	sbiw	r24, 0x01	; 1
 e72:	c8 17       	cp	r28, r24
 e74:	d9 07       	cpc	r29, r25
 e76:	8c f3       	brlt	.-30     	; 0xe5a <tw_master_receive+0x36>
	{
		p_data[i] = tw_read(TW_READ_ACK);
	}
	p_data[len-1] = tw_read(TW_READ_NACK);
 e78:	ec 01       	movw	r28, r24
 e7a:	c0 0f       	add	r28, r16
 e7c:	d1 1f       	adc	r29, r17
 e7e:	80 e0       	ldi	r24, 0x00	; 0
 e80:	0e 94 3c 09 	call	0x1278	; 0x1278 <tw_read>
 e84:	88 83       	st	Y, r24
	
	/* Send STOP condition */
	tw_stop();
 e86:	0e 94 8e 0a 	call	0x151c	; 0x151c <tw_stop>
	
	return SUCCESS;
 e8a:	80 e0       	ldi	r24, 0x00	; 0
 e8c:	90 e0       	ldi	r25, 0x00	; 0
 e8e:	01 c0       	rjmp	.+2      	; 0xe92 <tw_master_receive+0x6e>
	
	/* Send START condition */
	error_code = tw_start();
	if (error_code != SUCCESS)
	{
		return error_code;
 e90:	93 2f       	mov	r25, r19
	
	/* Send STOP condition */
	tw_stop();
	
	return SUCCESS;
 e92:	df 91       	pop	r29
 e94:	cf 91       	pop	r28
 e96:	1f 91       	pop	r17
 e98:	0f 91       	pop	r16
 e9a:	ff 90       	pop	r15
 e9c:	df 90       	pop	r13
 e9e:	cf 90       	pop	r12
 ea0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000014b4 <__subsf3>:
    14b4:	50 58       	subi	r21, 0x80	; 128

000014b6 <__addsf3>:
    14b6:	bb 27       	eor	r27, r27
    14b8:	aa 27       	eor	r26, r26
    14ba:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__addsf3x>
    14be:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000a7a <__addsf3x>:
 a7a:	11 c0       	rjmp	.+34     	; 0xa9e <__addsf3x+0x24>
 a7c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fp_pscA>
 a80:	38 f0       	brcs	.+14     	; 0xa90 <__addsf3x+0x16>
 a82:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fp_pscB>
 a86:	20 f0       	brcs	.+8      	; 0xa90 <__addsf3x+0x16>
 a88:	39 f4       	brne	.+14     	; 0xa98 <__addsf3x+0x1e>
 a8a:	9f 3f       	cpi	r25, 0xFF	; 255
 a8c:	19 f4       	brne	.+6      	; 0xa94 <__addsf3x+0x1a>
 a8e:	26 f4       	brtc	.+8      	; 0xa98 <__addsf3x+0x1e>
 a90:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_nan>
 a94:	0e f4       	brtc	.+2      	; 0xa98 <__addsf3x+0x1e>
 a96:	e0 95       	com	r30
 a98:	e7 fb       	bst	r30, 7
 a9a:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_inf>
 a9e:	e9 2f       	mov	r30, r25
 aa0:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fp_split3>
 aa4:	58 f3       	brcs	.-42     	; 0xa7c <__addsf3x+0x2>
 aa6:	ba 17       	cp	r27, r26
 aa8:	62 07       	cpc	r22, r18
 aaa:	73 07       	cpc	r23, r19
 aac:	84 07       	cpc	r24, r20
 aae:	95 07       	cpc	r25, r21
 ab0:	20 f0       	brcs	.+8      	; 0xaba <__addsf3x+0x40>
 ab2:	79 f4       	brne	.+30     	; 0xad2 <__addsf3x+0x58>
 ab4:	a6 f5       	brtc	.+104    	; 0xb1e <__addsf3x+0xa4>
 ab6:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__fp_zero>
 aba:	0e f4       	brtc	.+2      	; 0xabe <__addsf3x+0x44>
 abc:	e0 95       	com	r30
 abe:	0b 2e       	mov	r0, r27
 ac0:	ba 2f       	mov	r27, r26
 ac2:	a0 2d       	mov	r26, r0
 ac4:	0b 01       	movw	r0, r22
 ac6:	b9 01       	movw	r22, r18
 ac8:	90 01       	movw	r18, r0
 aca:	0c 01       	movw	r0, r24
 acc:	ca 01       	movw	r24, r20
 ace:	a0 01       	movw	r20, r0
 ad0:	11 24       	eor	r1, r1
 ad2:	ff 27       	eor	r31, r31
 ad4:	59 1b       	sub	r21, r25
 ad6:	99 f0       	breq	.+38     	; 0xafe <__addsf3x+0x84>
 ad8:	59 3f       	cpi	r21, 0xF9	; 249
 ada:	50 f4       	brcc	.+20     	; 0xaf0 <__addsf3x+0x76>
 adc:	50 3e       	cpi	r21, 0xE0	; 224
 ade:	68 f1       	brcs	.+90     	; 0xb3a <__addsf3x+0xc0>
 ae0:	1a 16       	cp	r1, r26
 ae2:	f0 40       	sbci	r31, 0x00	; 0
 ae4:	a2 2f       	mov	r26, r18
 ae6:	23 2f       	mov	r18, r19
 ae8:	34 2f       	mov	r19, r20
 aea:	44 27       	eor	r20, r20
 aec:	58 5f       	subi	r21, 0xF8	; 248
 aee:	f3 cf       	rjmp	.-26     	; 0xad6 <__addsf3x+0x5c>
 af0:	46 95       	lsr	r20
 af2:	37 95       	ror	r19
 af4:	27 95       	ror	r18
 af6:	a7 95       	ror	r26
 af8:	f0 40       	sbci	r31, 0x00	; 0
 afa:	53 95       	inc	r21
 afc:	c9 f7       	brne	.-14     	; 0xaf0 <__addsf3x+0x76>
 afe:	7e f4       	brtc	.+30     	; 0xb1e <__addsf3x+0xa4>
 b00:	1f 16       	cp	r1, r31
 b02:	ba 0b       	sbc	r27, r26
 b04:	62 0b       	sbc	r22, r18
 b06:	73 0b       	sbc	r23, r19
 b08:	84 0b       	sbc	r24, r20
 b0a:	ba f0       	brmi	.+46     	; 0xb3a <__addsf3x+0xc0>
 b0c:	91 50       	subi	r25, 0x01	; 1
 b0e:	a1 f0       	breq	.+40     	; 0xb38 <__addsf3x+0xbe>
 b10:	ff 0f       	add	r31, r31
 b12:	bb 1f       	adc	r27, r27
 b14:	66 1f       	adc	r22, r22
 b16:	77 1f       	adc	r23, r23
 b18:	88 1f       	adc	r24, r24
 b1a:	c2 f7       	brpl	.-16     	; 0xb0c <__addsf3x+0x92>
 b1c:	0e c0       	rjmp	.+28     	; 0xb3a <__addsf3x+0xc0>
 b1e:	ba 0f       	add	r27, r26
 b20:	62 1f       	adc	r22, r18
 b22:	73 1f       	adc	r23, r19
 b24:	84 1f       	adc	r24, r20
 b26:	48 f4       	brcc	.+18     	; 0xb3a <__addsf3x+0xc0>
 b28:	87 95       	ror	r24
 b2a:	77 95       	ror	r23
 b2c:	67 95       	ror	r22
 b2e:	b7 95       	ror	r27
 b30:	f7 95       	ror	r31
 b32:	9e 3f       	cpi	r25, 0xFE	; 254
 b34:	08 f0       	brcs	.+2      	; 0xb38 <__addsf3x+0xbe>
 b36:	b0 cf       	rjmp	.-160    	; 0xa98 <__addsf3x+0x1e>
 b38:	93 95       	inc	r25
 b3a:	88 0f       	add	r24, r24
 b3c:	08 f0       	brcs	.+2      	; 0xb40 <__addsf3x+0xc6>
 b3e:	99 27       	eor	r25, r25
 b40:	ee 0f       	add	r30, r30
 b42:	97 95       	ror	r25
 b44:	87 95       	ror	r24
 b46:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000010da <atan>:
    10da:	df 93       	push	r29
    10dc:	dd 27       	eor	r29, r29
    10de:	b9 2f       	mov	r27, r25
    10e0:	bf 77       	andi	r27, 0x7F	; 127
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	16 16       	cp	r1, r22
    10e8:	17 06       	cpc	r1, r23
    10ea:	48 07       	cpc	r20, r24
    10ec:	5b 07       	cpc	r21, r27
    10ee:	18 f4       	brcc	.+6      	; 0x10f6 <atan+0x1c>
    10f0:	d9 2f       	mov	r29, r25
    10f2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <inverse>
    10f6:	9f 93       	push	r25
    10f8:	8f 93       	push	r24
    10fa:	7f 93       	push	r23
    10fc:	6f 93       	push	r22
    10fe:	0e 94 9a 0a 	call	0x1534	; 0x1534 <square>
    1102:	e4 eb       	ldi	r30, 0xB4	; 180
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_powser>
    110a:	0e 94 26 0a 	call	0x144c	; 0x144c <__fp_round>
    110e:	2f 91       	pop	r18
    1110:	3f 91       	pop	r19
    1112:	4f 91       	pop	r20
    1114:	5f 91       	pop	r21
    1116:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__mulsf3x>
    111a:	dd 23       	and	r29, r29
    111c:	51 f0       	breq	.+20     	; 0x1132 <atan+0x58>
    111e:	90 58       	subi	r25, 0x80	; 128
    1120:	a2 ea       	ldi	r26, 0xA2	; 162
    1122:	2a ed       	ldi	r18, 0xDA	; 218
    1124:	3f e0       	ldi	r19, 0x0F	; 15
    1126:	49 ec       	ldi	r20, 0xC9	; 201
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	d0 78       	andi	r29, 0x80	; 128
    112c:	5d 27       	eor	r21, r29
    112e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__addsf3x>
    1132:	df 91       	pop	r29
    1134:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001524 <__divsf3>:
    1524:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__divsf3x>
    1528:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000008c8 <__divsf3x>:
 8c8:	10 c0       	rjmp	.+32     	; 0x8ea <__divsf3x+0x22>
 8ca:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fp_pscB>
 8ce:	58 f0       	brcs	.+22     	; 0x8e6 <__divsf3x+0x1e>
 8d0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fp_pscA>
 8d4:	40 f0       	brcs	.+16     	; 0x8e6 <__divsf3x+0x1e>
 8d6:	29 f4       	brne	.+10     	; 0x8e2 <__divsf3x+0x1a>
 8d8:	5f 3f       	cpi	r21, 0xFF	; 255
 8da:	29 f0       	breq	.+10     	; 0x8e6 <__divsf3x+0x1e>
 8dc:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_inf>
 8e0:	51 11       	cpse	r21, r1
 8e2:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__fp_szero>
 8e6:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_nan>
 8ea:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fp_split3>
 8ee:	68 f3       	brcs	.-38     	; 0x8ca <__divsf3x+0x2>

000008f0 <__divsf3_pse>:
 8f0:	99 23       	and	r25, r25
 8f2:	b1 f3       	breq	.-20     	; 0x8e0 <__divsf3x+0x18>
 8f4:	55 23       	and	r21, r21
 8f6:	91 f3       	breq	.-28     	; 0x8dc <__divsf3x+0x14>
 8f8:	95 1b       	sub	r25, r21
 8fa:	55 0b       	sbc	r21, r21
 8fc:	bb 27       	eor	r27, r27
 8fe:	aa 27       	eor	r26, r26
 900:	62 17       	cp	r22, r18
 902:	73 07       	cpc	r23, r19
 904:	84 07       	cpc	r24, r20
 906:	38 f0       	brcs	.+14     	; 0x916 <__stack+0x17>
 908:	9f 5f       	subi	r25, 0xFF	; 255
 90a:	5f 4f       	sbci	r21, 0xFF	; 255
 90c:	22 0f       	add	r18, r18
 90e:	33 1f       	adc	r19, r19
 910:	44 1f       	adc	r20, r20
 912:	aa 1f       	adc	r26, r26
 914:	a9 f3       	breq	.-22     	; 0x900 <__stack+0x1>
 916:	35 d0       	rcall	.+106    	; 0x982 <__stack+0x83>
 918:	0e 2e       	mov	r0, r30
 91a:	3a f0       	brmi	.+14     	; 0x92a <__stack+0x2b>
 91c:	e0 e8       	ldi	r30, 0x80	; 128
 91e:	32 d0       	rcall	.+100    	; 0x984 <__stack+0x85>
 920:	91 50       	subi	r25, 0x01	; 1
 922:	50 40       	sbci	r21, 0x00	; 0
 924:	e6 95       	lsr	r30
 926:	00 1c       	adc	r0, r0
 928:	ca f7       	brpl	.-14     	; 0x91c <__stack+0x1d>
 92a:	2b d0       	rcall	.+86     	; 0x982 <__stack+0x83>
 92c:	fe 2f       	mov	r31, r30
 92e:	29 d0       	rcall	.+82     	; 0x982 <__stack+0x83>
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	88 1f       	adc	r24, r24
 936:	bb 1f       	adc	r27, r27
 938:	26 17       	cp	r18, r22
 93a:	37 07       	cpc	r19, r23
 93c:	48 07       	cpc	r20, r24
 93e:	ab 07       	cpc	r26, r27
 940:	b0 e8       	ldi	r27, 0x80	; 128
 942:	09 f0       	breq	.+2      	; 0x946 <__stack+0x47>
 944:	bb 0b       	sbc	r27, r27
 946:	80 2d       	mov	r24, r0
 948:	bf 01       	movw	r22, r30
 94a:	ff 27       	eor	r31, r31
 94c:	93 58       	subi	r25, 0x83	; 131
 94e:	5f 4f       	sbci	r21, 0xFF	; 255
 950:	3a f0       	brmi	.+14     	; 0x960 <__stack+0x61>
 952:	9e 3f       	cpi	r25, 0xFE	; 254
 954:	51 05       	cpc	r21, r1
 956:	78 f0       	brcs	.+30     	; 0x976 <__stack+0x77>
 958:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_inf>
 95c:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__fp_szero>
 960:	5f 3f       	cpi	r21, 0xFF	; 255
 962:	e4 f3       	brlt	.-8      	; 0x95c <__stack+0x5d>
 964:	98 3e       	cpi	r25, 0xE8	; 232
 966:	d4 f3       	brlt	.-12     	; 0x95c <__stack+0x5d>
 968:	86 95       	lsr	r24
 96a:	77 95       	ror	r23
 96c:	67 95       	ror	r22
 96e:	b7 95       	ror	r27
 970:	f7 95       	ror	r31
 972:	9f 5f       	subi	r25, 0xFF	; 255
 974:	c9 f7       	brne	.-14     	; 0x968 <__stack+0x69>
 976:	88 0f       	add	r24, r24
 978:	91 1d       	adc	r25, r1
 97a:	96 95       	lsr	r25
 97c:	87 95       	ror	r24
 97e:	97 f9       	bld	r25, 7
 980:	08 95       	ret
 982:	e1 e0       	ldi	r30, 0x01	; 1
 984:	66 0f       	add	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	88 1f       	adc	r24, r24
 98a:	bb 1f       	adc	r27, r27
 98c:	62 17       	cp	r22, r18
 98e:	73 07       	cpc	r23, r19
 990:	84 07       	cpc	r24, r20
 992:	ba 07       	cpc	r27, r26
 994:	20 f0       	brcs	.+8      	; 0x99e <__stack+0x9f>
 996:	62 1b       	sub	r22, r18
 998:	73 0b       	sbc	r23, r19
 99a:	84 0b       	sbc	r24, r20
 99c:	ba 0b       	sbc	r27, r26
 99e:	ee 1f       	adc	r30, r30
 9a0:	88 f7       	brcc	.-30     	; 0x984 <__stack+0x85>
 9a2:	e0 95       	com	r30
 9a4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000014c2 <__fixsfsi>:
    14c2:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fixunssfsi>
    14c6:	68 94       	set
    14c8:	b1 11       	cpse	r27, r1
    14ca:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__fp_szero>
    14ce:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001138 <__fixunssfsi>:
    1138:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_splitA>
    113c:	88 f0       	brcs	.+34     	; 0x1160 <__fixunssfsi+0x28>
    113e:	9f 57       	subi	r25, 0x7F	; 127
    1140:	98 f0       	brcs	.+38     	; 0x1168 <__fixunssfsi+0x30>
    1142:	b9 2f       	mov	r27, r25
    1144:	99 27       	eor	r25, r25
    1146:	b7 51       	subi	r27, 0x17	; 23
    1148:	b0 f0       	brcs	.+44     	; 0x1176 <__fixunssfsi+0x3e>
    114a:	e1 f0       	breq	.+56     	; 0x1184 <__fixunssfsi+0x4c>
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	1a f0       	brmi	.+6      	; 0x115c <__fixunssfsi+0x24>
    1156:	ba 95       	dec	r27
    1158:	c9 f7       	brne	.-14     	; 0x114c <__fixunssfsi+0x14>
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <__fixunssfsi+0x4c>
    115c:	b1 30       	cpi	r27, 0x01	; 1
    115e:	91 f0       	breq	.+36     	; 0x1184 <__fixunssfsi+0x4c>
    1160:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__fp_zero>
    1164:	b1 e0       	ldi	r27, 0x01	; 1
    1166:	08 95       	ret
    1168:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__fp_zero>
    116c:	67 2f       	mov	r22, r23
    116e:	78 2f       	mov	r23, r24
    1170:	88 27       	eor	r24, r24
    1172:	b8 5f       	subi	r27, 0xF8	; 248
    1174:	39 f0       	breq	.+14     	; 0x1184 <__fixunssfsi+0x4c>
    1176:	b9 3f       	cpi	r27, 0xF9	; 249
    1178:	cc f3       	brlt	.-14     	; 0x116c <__fixunssfsi+0x34>
    117a:	86 95       	lsr	r24
    117c:	77 95       	ror	r23
    117e:	67 95       	ror	r22
    1180:	b3 95       	inc	r27
    1182:	d9 f7       	brne	.-10     	; 0x117a <__fixunssfsi+0x42>
    1184:	3e f4       	brtc	.+14     	; 0x1194 <__fixunssfsi+0x5c>
    1186:	90 95       	com	r25
    1188:	80 95       	com	r24
    118a:	70 95       	com	r23
    118c:	61 95       	neg	r22
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ea2 <__floatunsisf>:
 ea2:	e8 94       	clt
 ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <__floatsisf+0x12>

00000ea6 <__floatsisf>:
 ea6:	97 fb       	bst	r25, 7
 ea8:	3e f4       	brtc	.+14     	; 0xeb8 <__floatsisf+0x12>
 eaa:	90 95       	com	r25
 eac:	80 95       	com	r24
 eae:	70 95       	com	r23
 eb0:	61 95       	neg	r22
 eb2:	7f 4f       	sbci	r23, 0xFF	; 255
 eb4:	8f 4f       	sbci	r24, 0xFF	; 255
 eb6:	9f 4f       	sbci	r25, 0xFF	; 255
 eb8:	99 23       	and	r25, r25
 eba:	a9 f0       	breq	.+42     	; 0xee6 <__floatsisf+0x40>
 ebc:	f9 2f       	mov	r31, r25
 ebe:	96 e9       	ldi	r25, 0x96	; 150
 ec0:	bb 27       	eor	r27, r27
 ec2:	93 95       	inc	r25
 ec4:	f6 95       	lsr	r31
 ec6:	87 95       	ror	r24
 ec8:	77 95       	ror	r23
 eca:	67 95       	ror	r22
 ecc:	b7 95       	ror	r27
 ece:	f1 11       	cpse	r31, r1
 ed0:	f8 cf       	rjmp	.-16     	; 0xec2 <__floatsisf+0x1c>
 ed2:	fa f4       	brpl	.+62     	; 0xf12 <__floatsisf+0x6c>
 ed4:	bb 0f       	add	r27, r27
 ed6:	11 f4       	brne	.+4      	; 0xedc <__floatsisf+0x36>
 ed8:	60 ff       	sbrs	r22, 0
 eda:	1b c0       	rjmp	.+54     	; 0xf12 <__floatsisf+0x6c>
 edc:	6f 5f       	subi	r22, 0xFF	; 255
 ede:	7f 4f       	sbci	r23, 0xFF	; 255
 ee0:	8f 4f       	sbci	r24, 0xFF	; 255
 ee2:	9f 4f       	sbci	r25, 0xFF	; 255
 ee4:	16 c0       	rjmp	.+44     	; 0xf12 <__floatsisf+0x6c>
 ee6:	88 23       	and	r24, r24
 ee8:	11 f0       	breq	.+4      	; 0xeee <__floatsisf+0x48>
 eea:	96 e9       	ldi	r25, 0x96	; 150
 eec:	11 c0       	rjmp	.+34     	; 0xf10 <__floatsisf+0x6a>
 eee:	77 23       	and	r23, r23
 ef0:	21 f0       	breq	.+8      	; 0xefa <__floatsisf+0x54>
 ef2:	9e e8       	ldi	r25, 0x8E	; 142
 ef4:	87 2f       	mov	r24, r23
 ef6:	76 2f       	mov	r23, r22
 ef8:	05 c0       	rjmp	.+10     	; 0xf04 <__floatsisf+0x5e>
 efa:	66 23       	and	r22, r22
 efc:	71 f0       	breq	.+28     	; 0xf1a <__floatsisf+0x74>
 efe:	96 e8       	ldi	r25, 0x86	; 134
 f00:	86 2f       	mov	r24, r22
 f02:	70 e0       	ldi	r23, 0x00	; 0
 f04:	60 e0       	ldi	r22, 0x00	; 0
 f06:	2a f0       	brmi	.+10     	; 0xf12 <__floatsisf+0x6c>
 f08:	9a 95       	dec	r25
 f0a:	66 0f       	add	r22, r22
 f0c:	77 1f       	adc	r23, r23
 f0e:	88 1f       	adc	r24, r24
 f10:	da f7       	brpl	.-10     	; 0xf08 <__floatsisf+0x62>
 f12:	88 0f       	add	r24, r24
 f14:	96 95       	lsr	r25
 f16:	87 95       	ror	r24
 f18:	97 f9       	bld	r25, 7
 f1a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001508 <__fp_inf>:
    1508:	97 f9       	bld	r25, 7
    150a:	9f 67       	ori	r25, 0x7F	; 127
    150c:	80 e8       	ldi	r24, 0x80	; 128
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000153c <__fp_nan>:
    153c:	9f ef       	ldi	r25, 0xFF	; 255
    153e:	80 ec       	ldi	r24, 0xC0	; 192
    1540:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000011e6 <__fp_powser>:
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	1f 93       	push	r17
    11ec:	0f 93       	push	r16
    11ee:	ff 92       	push	r15
    11f0:	ef 92       	push	r14
    11f2:	df 92       	push	r13
    11f4:	7b 01       	movw	r14, r22
    11f6:	8c 01       	movw	r16, r24
    11f8:	68 94       	set
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <__fp_powser+0x22>
    11fc:	da 2e       	mov	r13, r26
    11fe:	ef 01       	movw	r28, r30
    1200:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__mulsf3x>
    1204:	fe 01       	movw	r30, r28
    1206:	e8 94       	clt
    1208:	a5 91       	lpm	r26, Z+
    120a:	25 91       	lpm	r18, Z+
    120c:	35 91       	lpm	r19, Z+
    120e:	45 91       	lpm	r20, Z+
    1210:	55 91       	lpm	r21, Z+
    1212:	a6 f3       	brts	.-24     	; 0x11fc <__fp_powser+0x16>
    1214:	ef 01       	movw	r28, r30
    1216:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__addsf3x>
    121a:	fe 01       	movw	r30, r28
    121c:	97 01       	movw	r18, r14
    121e:	a8 01       	movw	r20, r16
    1220:	da 94       	dec	r13
    1222:	69 f7       	brne	.-38     	; 0x11fe <__fp_powser+0x18>
    1224:	df 90       	pop	r13
    1226:	ef 90       	pop	r14
    1228:	ff 90       	pop	r15
    122a:	0f 91       	pop	r16
    122c:	1f 91       	pop	r17
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000014d0 <__fp_pscA>:
    14d0:	00 24       	eor	r0, r0
    14d2:	0a 94       	dec	r0
    14d4:	16 16       	cp	r1, r22
    14d6:	17 06       	cpc	r1, r23
    14d8:	18 06       	cpc	r1, r24
    14da:	09 06       	cpc	r0, r25
    14dc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000014de <__fp_pscB>:
    14de:	00 24       	eor	r0, r0
    14e0:	0a 94       	dec	r0
    14e2:	12 16       	cp	r1, r18
    14e4:	13 06       	cpc	r1, r19
    14e6:	14 06       	cpc	r1, r20
    14e8:	05 06       	cpc	r0, r21
    14ea:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000144c <__fp_round>:
    144c:	09 2e       	mov	r0, r25
    144e:	03 94       	inc	r0
    1450:	00 0c       	add	r0, r0
    1452:	11 f4       	brne	.+4      	; 0x1458 <__fp_round+0xc>
    1454:	88 23       	and	r24, r24
    1456:	52 f0       	brmi	.+20     	; 0x146c <__fp_round+0x20>
    1458:	bb 0f       	add	r27, r27
    145a:	40 f4       	brcc	.+16     	; 0x146c <__fp_round+0x20>
    145c:	bf 2b       	or	r27, r31
    145e:	11 f4       	brne	.+4      	; 0x1464 <__fp_round+0x18>
    1460:	60 ff       	sbrs	r22, 0
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__fp_round+0x20>
    1464:	6f 5f       	subi	r22, 0xFF	; 255
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001234 <__fp_split3>:
    1234:	57 fd       	sbrc	r21, 7
    1236:	90 58       	subi	r25, 0x80	; 128
    1238:	44 0f       	add	r20, r20
    123a:	55 1f       	adc	r21, r21
    123c:	59 f0       	breq	.+22     	; 0x1254 <__fp_splitA+0x10>
    123e:	5f 3f       	cpi	r21, 0xFF	; 255
    1240:	71 f0       	breq	.+28     	; 0x125e <__fp_splitA+0x1a>
    1242:	47 95       	ror	r20

00001244 <__fp_splitA>:
    1244:	88 0f       	add	r24, r24
    1246:	97 fb       	bst	r25, 7
    1248:	99 1f       	adc	r25, r25
    124a:	61 f0       	breq	.+24     	; 0x1264 <__fp_splitA+0x20>
    124c:	9f 3f       	cpi	r25, 0xFF	; 255
    124e:	79 f0       	breq	.+30     	; 0x126e <__fp_splitA+0x2a>
    1250:	87 95       	ror	r24
    1252:	08 95       	ret
    1254:	12 16       	cp	r1, r18
    1256:	13 06       	cpc	r1, r19
    1258:	14 06       	cpc	r1, r20
    125a:	55 1f       	adc	r21, r21
    125c:	f2 cf       	rjmp	.-28     	; 0x1242 <__fp_split3+0xe>
    125e:	46 95       	lsr	r20
    1260:	f1 df       	rcall	.-30     	; 0x1244 <__fp_splitA>
    1262:	08 c0       	rjmp	.+16     	; 0x1274 <__fp_splitA+0x30>
    1264:	16 16       	cp	r1, r22
    1266:	17 06       	cpc	r1, r23
    1268:	18 06       	cpc	r1, r24
    126a:	99 1f       	adc	r25, r25
    126c:	f1 cf       	rjmp	.-30     	; 0x1250 <__fp_splitA+0xc>
    126e:	86 95       	lsr	r24
    1270:	71 05       	cpc	r23, r1
    1272:	61 05       	cpc	r22, r1
    1274:	08 94       	sec
    1276:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000014ec <__fp_zero>:
    14ec:	e8 94       	clt

000014ee <__fp_szero>:
    14ee:	bb 27       	eor	r27, r27
    14f0:	66 27       	eor	r22, r22
    14f2:	77 27       	eor	r23, r23
    14f4:	cb 01       	movw	r24, r22
    14f6:	97 f9       	bld	r25, 7
    14f8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000014a4 <inverse>:
    14a4:	9b 01       	movw	r18, r22
    14a6:	ac 01       	movw	r20, r24
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	80 e8       	ldi	r24, 0x80	; 128
    14ae:	9f e3       	ldi	r25, 0x3F	; 63
    14b0:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__divsf3>

Disassembly of section .text.avrlibc.fplib:

0000152c <__mulsf3>:
    152c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__mulsf3x>
    1530:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000009a6 <__mulsf3x>:
 9a6:	0f c0       	rjmp	.+30     	; 0x9c6 <__mulsf3x+0x20>
 9a8:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fp_pscA>
 9ac:	38 f0       	brcs	.+14     	; 0x9bc <__mulsf3x+0x16>
 9ae:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fp_pscB>
 9b2:	20 f0       	brcs	.+8      	; 0x9bc <__mulsf3x+0x16>
 9b4:	95 23       	and	r25, r21
 9b6:	11 f0       	breq	.+4      	; 0x9bc <__mulsf3x+0x16>
 9b8:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_inf>
 9bc:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_nan>
 9c0:	11 24       	eor	r1, r1
 9c2:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__fp_szero>
 9c6:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fp_split3>
 9ca:	70 f3       	brcs	.-36     	; 0x9a8 <__mulsf3x+0x2>

000009cc <__mulsf3_pse>:
 9cc:	95 9f       	mul	r25, r21
 9ce:	c1 f3       	breq	.-16     	; 0x9c0 <__mulsf3x+0x1a>
 9d0:	95 0f       	add	r25, r21
 9d2:	50 e0       	ldi	r21, 0x00	; 0
 9d4:	55 1f       	adc	r21, r21
 9d6:	62 9f       	mul	r22, r18
 9d8:	f0 01       	movw	r30, r0
 9da:	72 9f       	mul	r23, r18
 9dc:	bb 27       	eor	r27, r27
 9de:	f0 0d       	add	r31, r0
 9e0:	b1 1d       	adc	r27, r1
 9e2:	63 9f       	mul	r22, r19
 9e4:	aa 27       	eor	r26, r26
 9e6:	f0 0d       	add	r31, r0
 9e8:	b1 1d       	adc	r27, r1
 9ea:	aa 1f       	adc	r26, r26
 9ec:	64 9f       	mul	r22, r20
 9ee:	66 27       	eor	r22, r22
 9f0:	b0 0d       	add	r27, r0
 9f2:	a1 1d       	adc	r26, r1
 9f4:	66 1f       	adc	r22, r22
 9f6:	82 9f       	mul	r24, r18
 9f8:	22 27       	eor	r18, r18
 9fa:	b0 0d       	add	r27, r0
 9fc:	a1 1d       	adc	r26, r1
 9fe:	62 1f       	adc	r22, r18
 a00:	73 9f       	mul	r23, r19
 a02:	b0 0d       	add	r27, r0
 a04:	a1 1d       	adc	r26, r1
 a06:	62 1f       	adc	r22, r18
 a08:	83 9f       	mul	r24, r19
 a0a:	a0 0d       	add	r26, r0
 a0c:	61 1d       	adc	r22, r1
 a0e:	22 1f       	adc	r18, r18
 a10:	74 9f       	mul	r23, r20
 a12:	33 27       	eor	r19, r19
 a14:	a0 0d       	add	r26, r0
 a16:	61 1d       	adc	r22, r1
 a18:	23 1f       	adc	r18, r19
 a1a:	84 9f       	mul	r24, r20
 a1c:	60 0d       	add	r22, r0
 a1e:	21 1d       	adc	r18, r1
 a20:	82 2f       	mov	r24, r18
 a22:	76 2f       	mov	r23, r22
 a24:	6a 2f       	mov	r22, r26
 a26:	11 24       	eor	r1, r1
 a28:	9f 57       	subi	r25, 0x7F	; 127
 a2a:	50 40       	sbci	r21, 0x00	; 0
 a2c:	9a f0       	brmi	.+38     	; 0xa54 <__mulsf3_pse+0x88>
 a2e:	f1 f0       	breq	.+60     	; 0xa6c <__mulsf3_pse+0xa0>
 a30:	88 23       	and	r24, r24
 a32:	4a f0       	brmi	.+18     	; 0xa46 <__mulsf3_pse+0x7a>
 a34:	ee 0f       	add	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	bb 1f       	adc	r27, r27
 a3a:	66 1f       	adc	r22, r22
 a3c:	77 1f       	adc	r23, r23
 a3e:	88 1f       	adc	r24, r24
 a40:	91 50       	subi	r25, 0x01	; 1
 a42:	50 40       	sbci	r21, 0x00	; 0
 a44:	a9 f7       	brne	.-22     	; 0xa30 <__mulsf3_pse+0x64>
 a46:	9e 3f       	cpi	r25, 0xFE	; 254
 a48:	51 05       	cpc	r21, r1
 a4a:	80 f0       	brcs	.+32     	; 0xa6c <__mulsf3_pse+0xa0>
 a4c:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_inf>
 a50:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__fp_szero>
 a54:	5f 3f       	cpi	r21, 0xFF	; 255
 a56:	e4 f3       	brlt	.-8      	; 0xa50 <__mulsf3_pse+0x84>
 a58:	98 3e       	cpi	r25, 0xE8	; 232
 a5a:	d4 f3       	brlt	.-12     	; 0xa50 <__mulsf3_pse+0x84>
 a5c:	86 95       	lsr	r24
 a5e:	77 95       	ror	r23
 a60:	67 95       	ror	r22
 a62:	b7 95       	ror	r27
 a64:	f7 95       	ror	r31
 a66:	e7 95       	ror	r30
 a68:	9f 5f       	subi	r25, 0xFF	; 255
 a6a:	c1 f7       	brne	.-16     	; 0xa5c <__mulsf3_pse+0x90>
 a6c:	fe 2b       	or	r31, r30
 a6e:	88 0f       	add	r24, r24
 a70:	91 1d       	adc	r25, r1
 a72:	96 95       	lsr	r25
 a74:	87 95       	ror	r24
 a76:	97 f9       	bld	r25, 7
 a78:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000bea <pow>:
 bea:	fa 01       	movw	r30, r20
 bec:	ee 0f       	add	r30, r30
 bee:	ff 1f       	adc	r31, r31
 bf0:	30 96       	adiw	r30, 0x00	; 0
 bf2:	21 05       	cpc	r18, r1
 bf4:	31 05       	cpc	r19, r1
 bf6:	a1 f1       	breq	.+104    	; 0xc60 <pow+0x76>
 bf8:	61 15       	cp	r22, r1
 bfa:	71 05       	cpc	r23, r1
 bfc:	61 f4       	brne	.+24     	; 0xc16 <pow+0x2c>
 bfe:	80 38       	cpi	r24, 0x80	; 128
 c00:	bf e3       	ldi	r27, 0x3F	; 63
 c02:	9b 07       	cpc	r25, r27
 c04:	49 f1       	breq	.+82     	; 0xc58 <pow+0x6e>
 c06:	68 94       	set
 c08:	90 38       	cpi	r25, 0x80	; 128
 c0a:	81 05       	cpc	r24, r1
 c0c:	61 f0       	breq	.+24     	; 0xc26 <pow+0x3c>
 c0e:	80 38       	cpi	r24, 0x80	; 128
 c10:	bf ef       	ldi	r27, 0xFF	; 255
 c12:	9b 07       	cpc	r25, r27
 c14:	41 f0       	breq	.+16     	; 0xc26 <pow+0x3c>
 c16:	99 23       	and	r25, r25
 c18:	4a f5       	brpl	.+82     	; 0xc6c <pow+0x82>
 c1a:	ff 3f       	cpi	r31, 0xFF	; 255
 c1c:	e1 05       	cpc	r30, r1
 c1e:	31 05       	cpc	r19, r1
 c20:	21 05       	cpc	r18, r1
 c22:	19 f1       	breq	.+70     	; 0xc6a <pow+0x80>
 c24:	e8 94       	clt
 c26:	08 94       	sec
 c28:	e7 95       	ror	r30
 c2a:	d9 01       	movw	r26, r18
 c2c:	aa 23       	and	r26, r26
 c2e:	29 f4       	brne	.+10     	; 0xc3a <pow+0x50>
 c30:	ab 2f       	mov	r26, r27
 c32:	be 2f       	mov	r27, r30
 c34:	f8 5f       	subi	r31, 0xF8	; 248
 c36:	d0 f3       	brcs	.-12     	; 0xc2c <pow+0x42>
 c38:	10 c0       	rjmp	.+32     	; 0xc5a <pow+0x70>
 c3a:	ff 5f       	subi	r31, 0xFF	; 255
 c3c:	70 f4       	brcc	.+28     	; 0xc5a <pow+0x70>
 c3e:	a6 95       	lsr	r26
 c40:	e0 f7       	brcc	.-8      	; 0xc3a <pow+0x50>
 c42:	f7 39       	cpi	r31, 0x97	; 151
 c44:	50 f0       	brcs	.+20     	; 0xc5a <pow+0x70>
 c46:	19 f0       	breq	.+6      	; 0xc4e <pow+0x64>
 c48:	ff 3a       	cpi	r31, 0xAF	; 175
 c4a:	38 f4       	brcc	.+14     	; 0xc5a <pow+0x70>
 c4c:	9f 77       	andi	r25, 0x7F	; 127
 c4e:	9f 93       	push	r25
 c50:	0d d0       	rcall	.+26     	; 0xc6c <pow+0x82>
 c52:	0f 90       	pop	r0
 c54:	07 fc       	sbrc	r0, 7
 c56:	90 58       	subi	r25, 0x80	; 128
 c58:	08 95       	ret
 c5a:	46 f0       	brts	.+16     	; 0xc6c <pow+0x82>
 c5c:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_nan>
 c60:	60 e0       	ldi	r22, 0x00	; 0
 c62:	70 e0       	ldi	r23, 0x00	; 0
 c64:	80 e8       	ldi	r24, 0x80	; 128
 c66:	9f e3       	ldi	r25, 0x3F	; 63
 c68:	08 95       	ret
 c6a:	4f e7       	ldi	r20, 0x7F	; 127
 c6c:	9f 77       	andi	r25, 0x7F	; 127
 c6e:	5f 93       	push	r21
 c70:	4f 93       	push	r20
 c72:	3f 93       	push	r19
 c74:	2f 93       	push	r18
 c76:	0e 94 a4 05 	call	0xb48	; 0xb48 <log>
 c7a:	2f 91       	pop	r18
 c7c:	3f 91       	pop	r19
 c7e:	4f 91       	pop	r20
 c80:	5f 91       	pop	r21
 c82:	0e 94 96 0a 	call	0x152c	; 0x152c <__mulsf3>
 c86:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <exp>

Disassembly of section .text.avrlibc.fplib:

00000c8a <sqrt>:
 c8a:	06 c0       	rjmp	.+12     	; 0xc98 <sqrt+0xe>
 c8c:	19 f4       	brne	.+6      	; 0xc94 <sqrt+0xa>
 c8e:	16 f4       	brtc	.+4      	; 0xc94 <sqrt+0xa>
 c90:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_nan>
 c94:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__fp_mpack>
 c98:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_splitA>
 c9c:	b8 f3       	brcs	.-18     	; 0xc8c <sqrt+0x2>
 c9e:	99 23       	and	r25, r25
 ca0:	c9 f3       	breq	.-14     	; 0xc94 <sqrt+0xa>
 ca2:	b6 f3       	brts	.-20     	; 0xc90 <sqrt+0x6>
 ca4:	9f 57       	subi	r25, 0x7F	; 127
 ca6:	55 0b       	sbc	r21, r21
 ca8:	87 ff       	sbrs	r24, 7
 caa:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_norm2>
 cae:	00 24       	eor	r0, r0
 cb0:	a0 e6       	ldi	r26, 0x60	; 96
 cb2:	40 ea       	ldi	r20, 0xA0	; 160
 cb4:	90 01       	movw	r18, r0
 cb6:	80 58       	subi	r24, 0x80	; 128
 cb8:	56 95       	lsr	r21
 cba:	97 95       	ror	r25
 cbc:	28 f4       	brcc	.+10     	; 0xcc8 <sqrt+0x3e>
 cbe:	80 5c       	subi	r24, 0xC0	; 192
 cc0:	66 0f       	add	r22, r22
 cc2:	77 1f       	adc	r23, r23
 cc4:	88 1f       	adc	r24, r24
 cc6:	20 f0       	brcs	.+8      	; 0xcd0 <sqrt+0x46>
 cc8:	26 17       	cp	r18, r22
 cca:	37 07       	cpc	r19, r23
 ccc:	48 07       	cpc	r20, r24
 cce:	30 f4       	brcc	.+12     	; 0xcdc <sqrt+0x52>
 cd0:	62 1b       	sub	r22, r18
 cd2:	73 0b       	sbc	r23, r19
 cd4:	84 0b       	sbc	r24, r20
 cd6:	20 29       	or	r18, r0
 cd8:	31 29       	or	r19, r1
 cda:	4a 2b       	or	r20, r26
 cdc:	a6 95       	lsr	r26
 cde:	17 94       	ror	r1
 ce0:	07 94       	ror	r0
 ce2:	20 25       	eor	r18, r0
 ce4:	31 25       	eor	r19, r1
 ce6:	4a 27       	eor	r20, r26
 ce8:	58 f7       	brcc	.-42     	; 0xcc0 <sqrt+0x36>
 cea:	66 0f       	add	r22, r22
 cec:	77 1f       	adc	r23, r23
 cee:	88 1f       	adc	r24, r24
 cf0:	20 f0       	brcs	.+8      	; 0xcfa <sqrt+0x70>
 cf2:	26 17       	cp	r18, r22
 cf4:	37 07       	cpc	r19, r23
 cf6:	48 07       	cpc	r20, r24
 cf8:	30 f4       	brcc	.+12     	; 0xd06 <sqrt+0x7c>
 cfa:	62 0b       	sbc	r22, r18
 cfc:	73 0b       	sbc	r23, r19
 cfe:	84 0b       	sbc	r24, r20
 d00:	20 0d       	add	r18, r0
 d02:	31 1d       	adc	r19, r1
 d04:	41 1d       	adc	r20, r1
 d06:	a0 95       	com	r26
 d08:	81 f7       	brne	.-32     	; 0xcea <sqrt+0x60>
 d0a:	b9 01       	movw	r22, r18
 d0c:	84 2f       	mov	r24, r20
 d0e:	91 58       	subi	r25, 0x81	; 129
 d10:	88 0f       	add	r24, r24
 d12:	96 95       	lsr	r25
 d14:	87 95       	ror	r24
 d16:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001534 <square>:
    1534:	9b 01       	movw	r18, r22
    1536:	ac 01       	movw	r20, r24
    1538:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__mulsf3>

Disassembly of section .text.avrlibc.fplib:

00000f1c <exp>:
 f1c:	08 c0       	rjmp	.+16     	; 0xf2e <exp+0x12>
 f1e:	29 f4       	brne	.+10     	; 0xf2a <exp+0xe>
 f20:	16 f0       	brts	.+4      	; 0xf26 <exp+0xa>
 f22:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_inf>
 f26:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__fp_zero>
 f2a:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_nan>
 f2e:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_splitA>
 f32:	a8 f3       	brcs	.-22     	; 0xf1e <exp+0x2>
 f34:	96 38       	cpi	r25, 0x86	; 134
 f36:	a0 f7       	brcc	.-24     	; 0xf20 <exp+0x4>
 f38:	07 f8       	bld	r0, 7
 f3a:	0f 92       	push	r0
 f3c:	e8 94       	clt
 f3e:	2b e3       	ldi	r18, 0x3B	; 59
 f40:	3a ea       	ldi	r19, 0xAA	; 170
 f42:	48 eb       	ldi	r20, 0xB8	; 184
 f44:	5f e7       	ldi	r21, 0x7F	; 127
 f46:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__mulsf3_pse>
 f4a:	0f 92       	push	r0
 f4c:	0f 92       	push	r0
 f4e:	0f 92       	push	r0
 f50:	4d b7       	in	r20, 0x3d	; 61
 f52:	5e b7       	in	r21, 0x3e	; 62
 f54:	0f 92       	push	r0
 f56:	0e 94 39 08 	call	0x1072	; 0x1072 <modf>
 f5a:	e1 ee       	ldi	r30, 0xE1	; 225
 f5c:	f0 e0       	ldi	r31, 0x00	; 0
 f5e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_powser>
 f62:	4f 91       	pop	r20
 f64:	5f 91       	pop	r21
 f66:	ef 91       	pop	r30
 f68:	ff 91       	pop	r31
 f6a:	e5 95       	asr	r30
 f6c:	ee 1f       	adc	r30, r30
 f6e:	ff 1f       	adc	r31, r31
 f70:	49 f0       	breq	.+18     	; 0xf84 <exp+0x68>
 f72:	fe 57       	subi	r31, 0x7E	; 126
 f74:	e0 68       	ori	r30, 0x80	; 128
 f76:	44 27       	eor	r20, r20
 f78:	ee 0f       	add	r30, r30
 f7a:	44 1f       	adc	r20, r20
 f7c:	fa 95       	dec	r31
 f7e:	e1 f7       	brne	.-8      	; 0xf78 <exp+0x5c>
 f80:	41 95       	neg	r20
 f82:	55 0b       	sbc	r21, r21
 f84:	0e 94 c9 07 	call	0xf92	; 0xf92 <ldexp>
 f88:	0f 90       	pop	r0
 f8a:	07 fe       	sbrs	r0, 7
 f8c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <inverse>
 f90:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000146e <__fp_mpack>:
    146e:	9f 3f       	cpi	r25, 0xFF	; 255
    1470:	31 f0       	breq	.+12     	; 0x147e <__fp_mpack_finite+0xc>

00001472 <__fp_mpack_finite>:
    1472:	91 50       	subi	r25, 0x01	; 1
    1474:	20 f4       	brcc	.+8      	; 0x147e <__fp_mpack_finite+0xc>
    1476:	87 95       	ror	r24
    1478:	77 95       	ror	r23
    147a:	67 95       	ror	r22
    147c:	b7 95       	ror	r27
    147e:	88 0f       	add	r24, r24
    1480:	91 1d       	adc	r25, r1
    1482:	96 95       	lsr	r25
    1484:	87 95       	ror	r24
    1486:	97 f9       	bld	r25, 7
    1488:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000014fa <__fp_norm2>:
    14fa:	91 50       	subi	r25, 0x01	; 1
    14fc:	50 40       	sbci	r21, 0x00	; 0
    14fe:	66 0f       	add	r22, r22
    1500:	77 1f       	adc	r23, r23
    1502:	88 1f       	adc	r24, r24
    1504:	d2 f7       	brpl	.-12     	; 0x14fa <__fp_norm2>
    1506:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000f92 <ldexp>:
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <ldexp+0xa>
     f94:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_inf>
     f98:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__fp_mpack>
     f9c:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_splitA>
     fa0:	d8 f3       	brcs	.-10     	; 0xf98 <ldexp+0x6>
     fa2:	99 23       	and	r25, r25
     fa4:	c9 f3       	breq	.-14     	; 0xf98 <ldexp+0x6>
     fa6:	94 0f       	add	r25, r20
     fa8:	51 1d       	adc	r21, r1
     faa:	a3 f3       	brvs	.-24     	; 0xf94 <ldexp+0x2>
     fac:	91 50       	subi	r25, 0x01	; 1
     fae:	50 40       	sbci	r21, 0x00	; 0
     fb0:	94 f0       	brlt	.+36     	; 0xfd6 <ldexp+0x44>
     fb2:	59 f0       	breq	.+22     	; 0xfca <ldexp+0x38>
     fb4:	88 23       	and	r24, r24
     fb6:	32 f0       	brmi	.+12     	; 0xfc4 <ldexp+0x32>
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	91 50       	subi	r25, 0x01	; 1
     fc0:	50 40       	sbci	r21, 0x00	; 0
     fc2:	c1 f7       	brne	.-16     	; 0xfb4 <ldexp+0x22>
     fc4:	9e 3f       	cpi	r25, 0xFE	; 254
     fc6:	51 05       	cpc	r21, r1
     fc8:	2c f7       	brge	.-54     	; 0xf94 <ldexp+0x2>
     fca:	88 0f       	add	r24, r24
     fcc:	91 1d       	adc	r25, r1
     fce:	96 95       	lsr	r25
     fd0:	87 95       	ror	r24
     fd2:	97 f9       	bld	r25, 7
     fd4:	08 95       	ret
     fd6:	5f 3f       	cpi	r21, 0xFF	; 255
     fd8:	ac f0       	brlt	.+42     	; 0x1004 <ldexp+0x72>
     fda:	98 3e       	cpi	r25, 0xE8	; 232
     fdc:	9c f0       	brlt	.+38     	; 0x1004 <ldexp+0x72>
     fde:	bb 27       	eor	r27, r27
     fe0:	86 95       	lsr	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b7 95       	ror	r27
     fe8:	08 f4       	brcc	.+2      	; 0xfec <ldexp+0x5a>
     fea:	b1 60       	ori	r27, 0x01	; 1
     fec:	93 95       	inc	r25
     fee:	c1 f7       	brne	.-16     	; 0xfe0 <ldexp+0x4e>
     ff0:	bb 0f       	add	r27, r27
     ff2:	58 f7       	brcc	.-42     	; 0xfca <ldexp+0x38>
     ff4:	11 f4       	brne	.+4      	; 0xffa <ldexp+0x68>
     ff6:	60 ff       	sbrs	r22, 0
     ff8:	e8 cf       	rjmp	.-48     	; 0xfca <ldexp+0x38>
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	e3 cf       	rjmp	.-58     	; 0xfca <ldexp+0x38>
    1004:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__fp_szero>

Disassembly of section .text.avrlibc.fplib:

00000b48 <log>:
 b48:	08 c0       	rjmp	.+16     	; 0xb5a <log+0x12>
 b4a:	16 f0       	brts	.+4      	; 0xb50 <log+0x8>
 b4c:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__fp_mpack>
 b50:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_nan>
 b54:	68 94       	set
 b56:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_inf>
 b5a:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_splitA>
 b5e:	a8 f3       	brcs	.-22     	; 0xb4a <log+0x2>
 b60:	99 23       	and	r25, r25
 b62:	c1 f3       	breq	.-16     	; 0xb54 <log+0xc>
 b64:	ae f3       	brts	.-22     	; 0xb50 <log+0x8>
 b66:	df 93       	push	r29
 b68:	cf 93       	push	r28
 b6a:	1f 93       	push	r17
 b6c:	0f 93       	push	r16
 b6e:	ff 92       	push	r15
 b70:	c9 2f       	mov	r28, r25
 b72:	dd 27       	eor	r29, r29
 b74:	88 23       	and	r24, r24
 b76:	2a f0       	brmi	.+10     	; 0xb82 <log+0x3a>
 b78:	21 97       	sbiw	r28, 0x01	; 1
 b7a:	66 0f       	add	r22, r22
 b7c:	77 1f       	adc	r23, r23
 b7e:	88 1f       	adc	r24, r24
 b80:	da f7       	brpl	.-10     	; 0xb78 <log+0x30>
 b82:	20 e0       	ldi	r18, 0x00	; 0
 b84:	30 e0       	ldi	r19, 0x00	; 0
 b86:	40 e8       	ldi	r20, 0x80	; 128
 b88:	5f eb       	ldi	r21, 0xBF	; 191
 b8a:	9f e3       	ldi	r25, 0x3F	; 63
 b8c:	88 39       	cpi	r24, 0x98	; 152
 b8e:	20 f0       	brcs	.+8      	; 0xb98 <log+0x50>
 b90:	80 3e       	cpi	r24, 0xE0	; 224
 b92:	38 f0       	brcs	.+14     	; 0xba2 <log+0x5a>
 b94:	21 96       	adiw	r28, 0x01	; 1
 b96:	8f 77       	andi	r24, 0x7F	; 127
 b98:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 b9c:	e9 e0       	ldi	r30, 0x09	; 9
 b9e:	f1 e0       	ldi	r31, 0x01	; 1
 ba0:	04 c0       	rjmp	.+8      	; 0xbaa <log+0x62>
 ba2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3>
 ba6:	e6 e3       	ldi	r30, 0x36	; 54
 ba8:	f1 e0       	ldi	r31, 0x01	; 1
 baa:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_powser>
 bae:	8b 01       	movw	r16, r22
 bb0:	be 01       	movw	r22, r28
 bb2:	ec 01       	movw	r28, r24
 bb4:	fb 2e       	mov	r15, r27
 bb6:	6f 57       	subi	r22, 0x7F	; 127
 bb8:	71 09       	sbc	r23, r1
 bba:	75 95       	asr	r23
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 0b       	sbc	r24, r24
 bc0:	99 0b       	sbc	r25, r25
 bc2:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
 bc6:	28 e1       	ldi	r18, 0x18	; 24
 bc8:	32 e7       	ldi	r19, 0x72	; 114
 bca:	41 e3       	ldi	r20, 0x31	; 49
 bcc:	5f e3       	ldi	r21, 0x3F	; 63
 bce:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__mulsf3x>
 bd2:	af 2d       	mov	r26, r15
 bd4:	98 01       	movw	r18, r16
 bd6:	ae 01       	movw	r20, r28
 bd8:	ff 90       	pop	r15
 bda:	0f 91       	pop	r16
 bdc:	1f 91       	pop	r17
 bde:	cf 91       	pop	r28
 be0:	df 91       	pop	r29
 be2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__addsf3x>
 be6:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001072 <modf>:
    1072:	fa 01       	movw	r30, r20
    1074:	dc 01       	movw	r26, r24
    1076:	aa 0f       	add	r26, r26
    1078:	bb 1f       	adc	r27, r27
    107a:	9b 01       	movw	r18, r22
    107c:	ac 01       	movw	r20, r24
    107e:	bf 57       	subi	r27, 0x7F	; 127
    1080:	28 f4       	brcc	.+10     	; 0x108c <modf+0x1a>
    1082:	22 27       	eor	r18, r18
    1084:	33 27       	eor	r19, r19
    1086:	44 27       	eor	r20, r20
    1088:	50 78       	andi	r21, 0x80	; 128
    108a:	20 c0       	rjmp	.+64     	; 0x10cc <modf+0x5a>
    108c:	b7 51       	subi	r27, 0x17	; 23
    108e:	90 f4       	brcc	.+36     	; 0x10b4 <modf+0x42>
    1090:	ab 2f       	mov	r26, r27
    1092:	00 24       	eor	r0, r0
    1094:	46 95       	lsr	r20
    1096:	37 95       	ror	r19
    1098:	27 95       	ror	r18
    109a:	01 1c       	adc	r0, r1
    109c:	a3 95       	inc	r26
    109e:	d2 f3       	brmi	.-12     	; 0x1094 <modf+0x22>
    10a0:	00 20       	and	r0, r0
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <modf+0x4e>
    10a4:	22 0f       	add	r18, r18
    10a6:	33 1f       	adc	r19, r19
    10a8:	44 1f       	adc	r20, r20
    10aa:	b3 95       	inc	r27
    10ac:	da f3       	brmi	.-10     	; 0x10a4 <modf+0x32>
    10ae:	0e d0       	rcall	.+28     	; 0x10cc <modf+0x5a>
    10b0:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__subsf3>
    10b4:	61 30       	cpi	r22, 0x01	; 1
    10b6:	71 05       	cpc	r23, r1
    10b8:	a0 e8       	ldi	r26, 0x80	; 128
    10ba:	8a 07       	cpc	r24, r26
    10bc:	b9 46       	sbci	r27, 0x69	; 105
    10be:	30 f4       	brcc	.+12     	; 0x10cc <modf+0x5a>
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	66 27       	eor	r22, r22
    10c6:	77 27       	eor	r23, r23
    10c8:	88 27       	eor	r24, r24
    10ca:	90 78       	andi	r25, 0x80	; 128
    10cc:	30 96       	adiw	r30, 0x00	; 0
    10ce:	21 f0       	breq	.+8      	; 0x10d8 <modf+0x66>
    10d0:	20 83       	st	Z, r18
    10d2:	31 83       	std	Z+1, r19	; 0x01
    10d4:	42 83       	std	Z+2, r20	; 0x02
    10d6:	53 83       	std	Z+3, r21	; 0x03
    10d8:	08 95       	ret
